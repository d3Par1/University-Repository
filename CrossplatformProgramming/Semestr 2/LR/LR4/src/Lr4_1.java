// –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ 4 - –ó–∞–≤–¥–∞–Ω–Ω—è 1
// –ö–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ —É LinkedHashSet
// –ê–≤—Ç–æ—Ä: –°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–∏ –¢–í-43, –ø—Ä—ñ–∑–≤–∏—â–µ Step
// –í–∞—Ä—ñ–∞–Ω—Ç 16

import java.util.*;
import java.io.*;
import java.text.SimpleDateFormat;

// –ö–ª–∞—Å —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞
class Employee {
    private String name;
    private int age;
    private double salary;
    private String position;
    private String department;
    private Date hireDate;

    public Employee(String name, int age, double salary, String position, String department) {
        this.name = name;
        this.age = age;
        this.salary = salary;
        this.position = position;
        this.department = department;
        this.hireDate = new Date(); // –ø–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ —è–∫ –¥–∞—Ç–∞ –Ω–∞–π–º—É
    }

    public Employee(String name, int age, double salary) {
        this(name, age, salary, "–ù–µ –≤–∫–∞–∑–∞–Ω–æ", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ");
    }

    // –ì–µ—Ç—Ç–µ—Ä–∏
    public String getName() { return name; }
    public int getAge() { return age; }
    public double getSalary() { return salary; }
    public String getPosition() { return position; }
    public String getDepartment() { return department; }
    public Date getHireDate() { return hireDate; }

    // –°–µ—Ç—Ç–µ—Ä–∏
    public void setName(String name) { this.name = name; }
    public void setAge(int age) { this.age = age; }
    public void setSalary(double salary) { this.salary = salary; }
    public void setPosition(String position) { this.position = position; }
    public void setDepartment(String department) { this.department = department; }
    public void setHireDate(Date hireDate) { this.hireDate = hireDate; }

    // –†—ñ–≤–Ω—ñ—Å—Ç—å –±–∞–∑—É—î—Ç—å—Å—è –Ω–∞ —ñ–º–µ–Ω—ñ —Ç–∞ –≤—ñ–∫—É
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Employee employee = (Employee) obj;
        return age == employee.age && Objects.equals(name, employee.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, age);
    }

    @Override
    public String toString() {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy");
        return String.format("%-20s | %-3d —Ä–æ–∫—ñ–≤ | %-8.2f –≥—Ä–Ω | %-15s | %-12s | %s",
            name, age, salary, position, department, dateFormat.format(hireDate));
    }

    // –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    public String getDetailedInfo() {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy");
        return String.format(
            "–Ü–º'—è: %s\n–í—ñ–∫: %d —Ä–æ–∫—ñ–≤\n–ó–∞—Ä–ø–ª–∞—Ç–∞: %.2f –≥—Ä–Ω\n–ü–æ—Å–∞–¥–∞: %s\n–í—ñ–¥–¥—ñ–ª: %s\n–î–∞—Ç–∞ –Ω–∞–π–º—É: %s\n",
            name, age, salary, position, department, dateFormat.format(hireDate));
    }
}

// –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞–º–∏
public class Lr4_1 {
    private LinkedHashSet<Employee> employees;
    private Random random;

    public Lr4_1() {
        employees = new LinkedHashSet<>();
        random = new Random();
        initializeWithSampleData();
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
    private void initializeWithSampleData() {
        // –ù–∞–±—ñ—Ä 1: IT –≤—ñ–¥–¥—ñ–ª
        addEmployee(new Employee("–û–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–µ–Ω–∫–æ", 28, 45000, "Java —Ä–æ–∑—Ä–æ–±–Ω–∏–∫", "IT"));
        addEmployee(new Employee("–ú–∞—Ä—ñ—è –ö–æ–≤–∞–ª–µ–Ω–∫–æ", 32, 52000, "Senior Developer", "IT"));
        addEmployee(new Employee("–î–º–∏—Ç—Ä–æ –®–µ–≤—á–µ–Ω–∫–æ", 25, 38000, "Junior Developer", "IT"));

        // –ù–∞–±—ñ—Ä 2: HR –≤—ñ–¥–¥—ñ–ª
        addEmployee(new Employee("–ê–Ω–Ω–∞ –ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ", 30, 35000, "HR –º–µ–Ω–µ–¥–∂–µ—Ä", "HR"));
        addEmployee(new Employee("–í–æ–ª–æ–¥–∏–º–∏—Ä –ú–µ–ª—å–Ω–∏–∫", 45, 48000, "HR –¥–∏—Ä–µ–∫—Ç–æ—Ä", "HR"));

        // –ù–∞–±—ñ—Ä 3: –§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –≤—ñ–¥–¥—ñ–ª
        addEmployee(new Employee("–ö–∞—Ç–µ—Ä–∏–Ω–∞ –¢–∫–∞—á–µ–Ω–∫–æ", 27, 42000, "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä", "–§—ñ–Ω–∞–Ω—Å–∏"));
        addEmployee(new Employee("–°–µ—Ä–≥—ñ–π –ú–æ—Ä–æ–∑–æ–≤", 35, 55000, "–§—ñ–Ω. –¥–∏—Ä–µ–∫—Ç–æ—Ä", "–§—ñ–Ω–∞–Ω—Å–∏"));

        System.out.println("‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: " + employees.size() + " —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤");
    }

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞
    public boolean addEmployee(Employee employee) {
        if (employee == null) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞: —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ null");
            return false;
        }

        boolean added = employees.add(employee);
        if (added) {
            System.out.println("‚úÖ –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –¥–æ–¥–∞–Ω–æ: " + employee.getName());
        } else {
            System.out.println("‚ö†Ô∏è –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ –∑ —Ç–∞–∫–∏–º —ñ–º'—è–º —Ç–∞ –≤—ñ–∫–æ–º –≤–∂–µ —ñ—Å–Ω—É—î: " + employee.getName());
        }
        return added;
    }

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞
    public boolean removeEmployee(Employee employee) {
        boolean removed = employees.remove(employee);
        if (removed) {
            System.out.println("‚úÖ –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–æ: " + employee.getName());
        } else {
            System.out.println("‚ùå –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return removed;
    }

    // –ü–æ—à—É–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –∑–∞ —ñ–º–µ–Ω–µ–º
    public Employee findEmployeeByName(String name) {
        for (Employee emp : employees) {
            if (emp.getName().equalsIgnoreCase(name)) {
                return emp;
            }
        }
        return null;
    }

    // –ü–æ—à—É–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –∑–∞ –≤—ñ–∫–æ–º
    public List<Employee> findEmployeesByAge(int age) {
        List<Employee> result = new ArrayList<>();
        for (Employee emp : employees) {
            if (emp.getAge() == age) {
                result.add(emp);
            }
        }
        return result;
    }

    // –ü–æ—à—É–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –∑–∞ –≤—ñ–¥–¥—ñ–ª–æ–º
    public List<Employee> findEmployeesByDepartment(String department) {
        List<Employee> result = new ArrayList<>();
        for (Employee emp : employees) {
            if (emp.getDepartment().equalsIgnoreCase(department)) {
                result.add(emp);
            }
        }
        return result;
    }

    // –ü–æ—à—É–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º –∑–∞—Ä–ø–ª–∞—Ç–∏
    public List<Employee> findEmployeesBySalaryRange(double minSalary, double maxSalary) {
        List<Employee> result = new ArrayList<>();
        for (Employee emp : employees) {
            if (emp.getSalary() >= minSalary && emp.getSalary() <= maxSalary) {
                result.add(emp);
            }
        }
        return result;
    }

    // –í–∏–≤–µ–¥–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
    public void displayAllEmployees() {
        System.out.println("\nüë• –°–ü–ò–°–û–ö –°–ü–Ü–í–†–û–ë–Ü–¢–ù–ò–ö–Ü–í (" + employees.size() + " –æ—Å—ñ–±)");
        System.out.println("=" .repeat(85));

        if (employees.isEmpty()) {
            System.out.println("–°–ø–∏—Å–æ–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π");
            return;
        }

        System.out.println("–Ü–º'—è                 | –í—ñ–∫     | –ó–∞—Ä–ø–ª–∞—Ç–∞  | –ü–æ—Å–∞–¥–∞          | –í—ñ–¥–¥—ñ–ª       | –î–∞—Ç–∞ –Ω–∞–π–º—É");
        System.out.println("-" .repeat(85));

        for (Employee emp : employees) {
            System.out.println(emp);
        }

        System.out.println("-" .repeat(85));
        System.out.printf("–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: %d —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤\n", employees.size());
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    public void displayStatistics() {
        System.out.println("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ü–Ü–í–†–û–ë–Ü–¢–ù–ò–ö–Ü–í");
        System.out.println("=" .repeat(40));

        if (employees.isEmpty()) {
            System.out.println("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
            return;
        }

        // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        double totalSalary = employees.stream().mapToDouble(Employee::getSalary).sum();
        double avgSalary = employees.stream().mapToDouble(Employee::getSalary).average().orElse(0);
        double maxSalary = employees.stream().mapToDouble(Employee::getSalary).max().orElse(0);
        double minSalary = employees.stream().mapToDouble(Employee::getSalary).min().orElse(0);

        double avgAge = employees.stream().mapToInt(Employee::getAge).average().orElse(0);
        int maxAge = employees.stream().mapToInt(Employee::getAge).max().orElse(0);
        int minAge = employees.stream().mapToInt(Employee::getAge).min().orElse(0);

        System.out.printf("–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: %d\n", employees.size());
        System.out.printf("–ó–∞–≥–∞–ª—å–Ω–∏–π —Ñ–æ–Ω–¥ –∑–∞—Ä–ø–ª–∞—Ç–∏: %.2f –≥—Ä–Ω\n", totalSalary);
        System.out.printf("–°–µ—Ä–µ–¥–Ω—è –∑–∞—Ä–ø–ª–∞—Ç–∞: %.2f –≥—Ä–Ω\n", avgSalary);
        System.out.printf("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: %.2f –≥—Ä–Ω\n", minSalary);
        System.out.printf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: %.2f –≥—Ä–Ω\n", maxSalary);
        System.out.printf("–°–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–∫: %.1f —Ä–æ–∫—ñ–≤\n", avgAge);
        System.out.printf("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤—ñ–∫: %d —Ä–æ–∫—ñ–≤\n", minAge);
        System.out.printf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –≤—ñ–∫: %d —Ä–æ–∫—ñ–≤\n", maxAge);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö
        System.out.println("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö:");
        Map<String, List<Employee>> byDepartment = new HashMap<>();
        for (Employee emp : employees) {
            byDepartment.computeIfAbsent(emp.getDepartment(), k -> new ArrayList<>()).add(emp);
        }

        for (Map.Entry<String, List<Employee>> entry : byDepartment.entrySet()) {
            String dept = entry.getKey();
            List<Employee> deptEmployees = entry.getValue();
            double deptAvgSalary = deptEmployees.stream().mapToDouble(Employee::getSalary).average().orElse(0);

            System.out.printf("  %s: %d –æ—Å—ñ–±, —Å–µ—Ä–µ–¥–Ω—è –∑–∞—Ä–ø–ª–∞—Ç–∞: %.2f –≥—Ä–Ω\n",
                dept, deptEmployees.size(), deptAvgSalary);
        }

        // –í—ñ–∫–æ–≤—ñ –≥—Ä—É–ø–∏
        System.out.println("\n–í—ñ–∫–æ–≤—ñ –≥—Ä—É–ø–∏:");
        long young = employees.stream().filter(e -> e.getAge() < 30).count();
        long middle = employees.stream().filter(e -> e.getAge() >= 30 && e.getAge() < 45).count();
        long senior = employees.stream().filter(e -> e.getAge() >= 45).count();

        System.out.printf("  –ú–æ–ª–æ–¥—ñ (< 30 —Ä–æ–∫—ñ–≤): %d\n", young);
        System.out.printf("  –°–µ—Ä–µ–¥–Ω—ñ (30-44 —Ä–æ–∫–∏): %d\n", middle);
        System.out.printf("  –°—Ç–∞—Ä—à—ñ (45+ —Ä–æ–∫—ñ–≤): %d\n", senior);
    }

    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
    public void sortEmployees(String criterion) {
        List<Employee> sorted = new ArrayList<>(employees);

        switch (criterion.toLowerCase()) {
            case "name":
            case "—ñ–º'—è":
                sorted.sort(Comparator.comparing(Employee::getName));
                break;
            case "age":
            case "–≤—ñ–∫":
                sorted.sort(Comparator.comparing(Employee::getAge));
                break;
            case "salary":
            case "–∑–∞—Ä–ø–ª–∞—Ç–∞":
                sorted.sort(Comparator.comparing(Employee::getSalary).reversed());
                break;
            case "department":
            case "–≤—ñ–¥–¥—ñ–ª":
                sorted.sort(Comparator.comparing(Employee::getDepartment)
                    .thenComparing(Employee::getName));
                break;
            default:
                System.out.println("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫—Ä–∏—Ç–µ—Ä—ñ–π —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è");
                return;
        }

        System.out.println("\nüìã –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞: " + criterion);
        System.out.println("=" .repeat(85));
        System.out.println("–Ü–º'—è                 | –í—ñ–∫     | –ó–∞—Ä–ø–ª–∞—Ç–∞  | –ü–æ—Å–∞–¥–∞          | –í—ñ–¥–¥—ñ–ª       | –î–∞—Ç–∞ –Ω–∞–π–º—É");
        System.out.println("-" .repeat(85));

        for (Employee emp : sorted) {
            System.out.println(emp);
        }
    }

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª
    public void saveToFile(String filename) {
        try (PrintWriter writer = new PrintWriter(new FileWriter(filename))) {
            writer.println("=== –ó–í–Ü–¢ –ü–û –°–ü–Ü–í–†–û–ë–Ü–¢–ù–ò–ö–ê–• ===");
            writer.println("–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: " + new SimpleDateFormat("dd.MM.yyyy HH:mm:ss").format(new Date()));
            writer.println("–°—Ç—É–¥–µ–Ω—Ç: –≥—Ä—É–ø–∏ –¢–í-43, –ø—Ä—ñ–∑–≤–∏—â–µ Step, –≤–∞—Ä—ñ–∞–Ω—Ç 16");
            writer.println();

            writer.println("–ü–û–ß–ê–¢–ö–û–í–Ü –î–ê–ù–Ü:");
            for (Employee emp : employees) {
                writer.println(emp.getDetailedInfo());
                writer.println("-" .repeat(40));
            }

            writer.println("–°–¢–ê–¢–ò–°–¢–ò–ö–ê:");
            if (!employees.isEmpty()) {
                double avgSalary = employees.stream().mapToDouble(Employee::getSalary).average().orElse(0);
                double avgAge = employees.stream().mapToInt(Employee::getAge).average().orElse(0);

                writer.printf("–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: %d —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤\n", employees.size());
                writer.printf("–°–µ—Ä–µ–¥–Ω—è –∑–∞—Ä–ø–ª–∞—Ç–∞: %.2f –≥—Ä–Ω\n", avgSalary);
                writer.printf("–°–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–∫: %.1f —Ä–æ–∫—ñ–≤\n", avgAge);
            }

            System.out.println("‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: " + filename);
        } catch (IOException e) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: " + e.getMessage());
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
    public void generateRandomEmployees(int count) {
        String[] names = {
            "–û–ª–µ–∫—Å—ñ–π –Ü–≤–∞–Ω–µ–Ω–∫–æ", "–¢–µ—Ç—è–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞", "–ú–∏–∫–æ–ª–∞ –°–∏–¥–æ—Ä–µ–Ω–∫–æ", "–û–ª—å–≥–∞ –ö–æ–≤–∞–ª—å",
            "–ê–Ω–¥—Ä—ñ–π –õ–∏—Å–µ–Ω–∫–æ", "–Æ–ª—ñ—è –§–µ–¥–æ—Ä–æ–≤–∞", "–í—ñ–∫—Ç–æ—Ä –ú–æ—Ä–æ–∑", "–ù–∞—Ç–∞–ª—ñ—è –ö–æ–∑–ª–æ–≤–∞",
            "–ü–∞–≤–ª–æ –ö—Ä–∞–º–∞—Ä", "–°–≤—ñ—Ç–ª–∞–Ω–∞ –ì–æ–Ω—á–∞—Ä", "–†–æ–º–∞–Ω –ö–ª–∏–º–µ–Ω–∫–æ", "–Ü—Ä–∏–Ω–∞ –°–∞–≤—á–µ–Ω–∫–æ"
        };

        String[] positions = {
            "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–ê–Ω–∞–ª—ñ—Ç–∏–∫", "–°–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç", "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä",
            "–†–æ–∑—Ä–æ–±–Ω–∏–∫", "–î–∏–∑–∞–π–Ω–µ—Ä", "–¢–µ—Å—Ç—É–≤–∞–ª—å–Ω–∏–∫", "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
        };

        String[] departments = {"IT", "HR", "–§—ñ–Ω–∞–Ω—Å–∏", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ü—Ä–æ–¥–∞–∂—ñ", "–õ–æ–≥—ñ—Å—Ç–∏–∫–∞"};

        System.out.printf("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è %d –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤...\n", count);

        for (int i = 0; i < count; i++) {
            String name = names[random.nextInt(names.length)];
            int age = 22 + random.nextInt(43); // 22-65 —Ä–æ–∫—ñ–≤
            double salary = 25000 + random.nextInt(75000); // 25k-100k
            String position = positions[random.nextInt(positions.length)];
            String department = departments[random.nextInt(departments.length)];

            Employee emp = new Employee(name, age, salary, position, department);
            addEmployee(emp);
        }
    }

    // –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é
    public void showInteractiveMenu() {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nüéÆ –ú–ï–ù–Æ –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –°–ü–Ü–í–†–û–ë–Ü–¢–ù–ò–ö–ê–ú–ò");
            System.out.println("=" .repeat(40));
            System.out.println("1. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤");
            System.out.println("2. –î–æ–¥–∞—Ç–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞");
            System.out.println("3. –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞");
            System.out.println("4. –ó–Ω–∞–π—Ç–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞");
            System.out.println("5. –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
            System.out.println("6. –°–æ—Ä—Ç—É–≤–∞—Ç–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤");
            System.out.println("7. –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤");
            System.out.println("8. –ó–±–µ—Ä–µ–≥—Ç–∏ —É —Ñ–∞–π–ª");
            System.out.println("0. –í–∏–π—Ç–∏");
            System.out.print("–í–∞—à –≤–∏–±—ñ—Ä: ");

            try {
                int choice = scanner.nextInt();
                scanner.nextLine(); // —Å–ø–æ–∂–∏–≤–∞—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫

                switch (choice) {
                    case 1:
                        displayAllEmployees();
                        break;

                    case 2:
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è: ");
                        String name = scanner.nextLine();
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å –≤—ñ–∫: ");
                        int age = scanner.nextInt();
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É: ");
                        double salary = scanner.nextDouble();
                        scanner.nextLine();
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∞–¥—É: ");
                        String position = scanner.nextLine();
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª: ");
                        String department = scanner.nextLine();

                        Employee newEmp = new Employee(name, age, salary, position, department);
                        addEmployee(newEmp);
                        break;

                    case 3:
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ");
                        String removeName = scanner.nextLine();
                        Employee empToRemove = findEmployeeByName(removeName);
                        if (empToRemove != null) {
                            removeEmployee(empToRemove);
                        } else {
                            System.out.println("‚ùå –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                        }
                        break;

                    case 4:
                        System.out.println("–ü–æ—à—É–∫ –∑–∞:");
                        System.out.println("1 - –Ü–º'—è–º, 2 - –í—ñ–∫–æ–º, 3 - –í—ñ–¥–¥—ñ–ª–æ–º, 4 - –ó–∞—Ä–ø–ª–∞—Ç–æ—é");
                        int searchType = scanner.nextInt();
                        scanner.nextLine();

                        if (searchType == 1) {
                            System.out.print("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è: ");
                            String searchName = scanner.nextLine();
                            Employee found = findEmployeeByName(searchName);
                            if (found != null) {
                                System.out.println("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ: " + found);
                            } else {
                                System.out.println("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                            }
                        } else if (searchType == 2) {
                            System.out.print("–í–≤–µ–¥—ñ—Ç—å –≤—ñ–∫: ");
                            int searchAge = scanner.nextInt();
                            List<Employee> foundByAge = findEmployeesByAge(searchAge);
                            if (!foundByAge.isEmpty()) {
                                System.out.println("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ " + foundByAge.size() + " —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤:");
                                foundByAge.forEach(System.out::println);
                            } else {
                                System.out.println("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                            }
                        }
                        break;

                    case 5:
                        displayStatistics();
                        break;

                    case 6:
                        System.out.println("–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞: name/age/salary/department");
                        String sortBy = scanner.nextLine();
                        sortEmployees(sortBy);
                        break;

                    case 7:
                        System.out.print("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: ");
                        int count = scanner.nextInt();
                        generateRandomEmployees(count);
                        break;

                    case 8:
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, employees.txt): ");
                        String filename = scanner.nextLine();
                        saveToFile(filename);
                        break;

                    case 0:
                        return;

                    default:
                        System.out.println("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!");
                }
            } catch (Exception e) {
                System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è!");
                scanner.nextLine();
            }
        }
    }

    public static void main(String[] args) {
        System.out.println("=== –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ 4 - –ó–∞–≤–¥–∞–Ω–Ω—è 1 ===");
        System.out.println("LinkedHashSet: —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞–º–∏");
        System.out.println("–°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–∏ –¢–í-43, –ø—Ä—ñ–∑–≤–∏—â–µ Step, –≤–∞—Ä—ñ–∞–Ω—Ç 16\n");

        Lr4_1 program = new Lr4_1();

        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É
        program.displayAllEmployees();
        program.displayStatistics();

        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É
        System.out.println("\nüîç –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ü–û–®–£–ö–£:");
        Employee found = program.findEmployeeByName("–ú–∞—Ä—ñ—è –ö–æ–≤–∞–ª–µ–Ω–∫–æ");
        if (found != null) {
            System.out.println("–ó–Ω–∞–π–¥–µ–Ω–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞:");
            System.out.println(found.getDetailedInfo());
        }

        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        program.sortEmployees("salary");

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª
        program.saveToFile("employees_output.txt");

        // –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é
        program.showInteractiveMenu();

        System.out.println("\n‚úÖ –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!");
    }
}