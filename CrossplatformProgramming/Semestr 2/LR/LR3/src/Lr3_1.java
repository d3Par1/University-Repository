// –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ 3 - –ó–∞–≤–¥–∞–Ω–Ω—è 1
// TreeMap: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–Ω—è –∑ –Ω–∞–π–±—ñ–ª—å—à–∏–º –∫–ª—é—á–µ–º, —Å—Ç—Ä–æ–≥–æ –º–µ–Ω—à–∏–º –∑–∞ –¥–∞–Ω–∏–π
// –ê–≤—Ç–æ—Ä: –°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–∏ –¢–í-43, –ø—Ä—ñ–∑–≤–∏—â–µ Step
// –í–∞—Ä—ñ–∞–Ω—Ç 16

import java.util.*;

public class Lr3_1 {
    private TreeMap<Integer, String> studentGrades;
    private TreeMap<String, Double> productPrices;
    private TreeMap<Date, String> events;

    public Lr3_1() {
        initializeCollections();
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
    private void initializeCollections() {
        // TreeMap –∑ –æ—Ü—ñ–Ω–∫–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ (–∫–ª—é—á - –æ—Ü—ñ–Ω–∫–∞, –∑–Ω–∞—á–µ–Ω–Ω—è - —ñ–º'—è —Å—Ç—É–¥–µ–Ω—Ç–∞)
        studentGrades = new TreeMap<>();
        studentGrades.put(100, "–ú–∞—Ä—ñ—è –í—ñ–¥–º—ñ–Ω–Ω–∏—Ü—è");
        studentGrades.put(95, "–û–ª–µ–∫—Å–∞–Ω–¥—Ä –°—Ç–∞—Ä–∞–Ω–Ω–∏–π");
        studentGrades.put(90, "–ö–∞—Ç–µ—Ä–∏–Ω–∞ –†–æ–∑—É–º–Ω–∞");
        studentGrades.put(85, "–î–º–∏—Ç—Ä–æ –ó–¥—ñ–±–Ω–∏–π");
        studentGrades.put(80, "–ê–Ω–Ω–∞ –ü—Ä–∞—Ü—å–æ–≤–∏—Ç–∞");
        studentGrades.put(75, "–í–æ–ª–æ–¥–∏–º–∏—Ä –ù–∞–º–∞–≥–∞—î—Ç—å—Å—è");
        studentGrades.put(70, "–û–ª—å–≥–∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞");
        studentGrades.put(65, "–°–µ—Ä–≥—ñ–π –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π");
        studentGrades.put(60, "–¢–µ—Ç—è–Ω–∞ –ú–µ–∂–æ–≤–∞");
        studentGrades.put(55, "–ê–Ω–¥—Ä—ñ–π –°–ª–∞–±–∫–∏–π");

        // TreeMap –∑ —Ü—ñ–Ω–∞–º–∏ —Ç–æ–≤–∞—Ä—ñ–≤ (–∫–ª—é—á - —Ü—ñ–Ω–∞, –∑–Ω–∞—á–µ–Ω–Ω—è - –Ω–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É)
        productPrices = new TreeMap<>();
        productPrices.put("–ú–æ–ª–æ–∫–æ", 25.50);
        productPrices.put("–•–ª—ñ–±", 15.00);
        productPrices.put("–Ø–π—Ü—è", 35.80);
        productPrices.put("–ú–∞—Å–ª–æ", 89.99);
        productPrices.put("–°–∏—Ä", 120.00);
        productPrices.put("–ú'—è—Å–æ", 250.75);
        productPrices.put("–†–∏–±–∞", 180.40);
        productPrices.put("–û–≤–æ—á—ñ", 45.30);
        productPrices.put("–§—Ä—É–∫—Ç–∏", 68.20);
        productPrices.put("–ù–∞–ø–æ—ó", 32.10);

        // TreeMap –∑ –ø–æ–¥—ñ—è–º–∏ (–∫–ª—é—á - –¥–∞—Ç–∞, –∑–Ω–∞—á–µ–Ω–Ω—è - –æ–ø–∏—Å –ø–æ–¥—ñ—ó)
        events = new TreeMap<>();
        Calendar cal = Calendar.getInstance();

        cal.set(2024, Calendar.JANUARY, 15);
        events.put(cal.getTime(), "–ù–æ–≤–æ—Ä—ñ—á–Ω—ñ –∫–∞–Ω—ñ–∫—É–ª–∏");

        cal.set(2024, Calendar.FEBRUARY, 14);
        events.put(cal.getTime(), "–î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞");

        cal.set(2024, Calendar.MARCH, 8);
        events.put(cal.getTime(), "–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –∂—ñ–Ω–æ—á–∏–π –¥–µ–Ω—å");

        cal.set(2024, Calendar.MAY, 1);
        events.put(cal.getTime(), "–î–µ–Ω—å –ø—Ä–∞—Ü—ñ");

        cal.set(2024, Calendar.MAY, 9);
        events.put(cal.getTime(), "–î–µ–Ω—å –ü–µ—Ä–µ–º–æ–≥–∏");

        cal.set(2024, Calendar.AUGUST, 24);
        events.put(cal.getTime(), "–î–µ–Ω—å –ù–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –£–∫—Ä–∞—ó–Ω–∏");

        cal.set(2024, Calendar.OCTOBER, 31);
        events.put(cal.getTime(), "–•–µ–ª–ª–æ–≤—ñ–Ω");

        cal.set(2024, Calendar.DECEMBER, 25);
        events.put(cal.getTime(), "–†—ñ–∑–¥–≤–æ");

        cal.set(2024, Calendar.DECEMBER, 31);
        events.put(cal.getTime(), "–ù–æ–≤–∏–π —Ä—ñ–∫");
    }

    // –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ—à—É–∫—É –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–Ω—è –∑ –Ω–∞–π–±—ñ–ª—å—à–∏–º –∫–ª—é—á–µ–º, —Å—Ç—Ä–æ–≥–æ –º–µ–Ω—à–∏–º –∑–∞ –¥–∞–Ω–∏–π
    public <K, V> Map.Entry<K, V> getLowerEntry(TreeMap<K, V> map, K key) {
        if (map == null || key == null) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞: TreeMap –∞–±–æ –∫–ª—é—á –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ null");
            return null;
        }

        Map.Entry<K, V> result = map.lowerEntry(key);

        if (result == null) {
            System.out.println("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–∞, —Å—Ç—Ä–æ–≥–æ –º–µ–Ω—à–æ–≥–æ –∑–∞ " + key);
            return null;
        }

        System.out.printf("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ: –∫–ª—é—á = %s, –∑–Ω–∞—á–µ–Ω–Ω—è = %s\n", result.getKey(), result.getValue());
        return result;
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ –æ—Ü—ñ–Ω–∫–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
    public void demonstrateStudentGrades() {
        System.out.println("\nüéì –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –û—Ü—ñ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤");
        System.out.println("=" .repeat(50));

        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—î—ó TreeMap
        System.out.println("–í—Å—ñ —Å—Ç—É–¥–µ–Ω—Ç–∏ —Ç–∞ —ó—Ö –æ—Ü—ñ–Ω–∫–∏:");
        for (Map.Entry<Integer, String> entry : studentGrades.entrySet()) {
            System.out.printf("  %d –±–∞–ª—ñ–≤: %s\n", entry.getKey(), entry.getValue());
        }

        // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
        int[] testGrades = {92, 85, 55, 101, 50};

        System.out.println("\n–ü–æ—à—É–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑ –Ω–∞–π–≤–∏—â–æ—é –æ—Ü—ñ–Ω–∫–æ—é, –º–µ–Ω—à–æ—é –∑–∞ –∑–∞–¥–∞–Ω—É:");
        for (int grade : testGrades) {
            System.out.printf("\n–ü–æ—à—É–∫ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ %d:\n", grade);
            Map.Entry<Integer, String> result = getLowerEntry(studentGrades, grade);

            if (result != null) {
                System.out.printf("‚Üí –ù–∞–π–±–ª–∏–∂—á–∏–π –∫—Ä–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: %s –∑ –æ—Ü—ñ–Ω–∫–æ—é %d\n",
                    result.getValue(), result.getKey());
            }
        }
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ —Ü—ñ–Ω–∞–º–∏ —Ç–æ–≤–∞—Ä—ñ–≤
    public void demonstrateProductPrices() {
        System.out.println("\nüõí –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –¶—ñ–Ω–∏ —Ç–æ–≤–∞—Ä—ñ–≤");
        System.out.println("=" .repeat(50));

        // –°—Ç–≤–æ—Ä—é—î–º–æ TreeMap –∑ —Ü—ñ–Ω–∞–º–∏ —è–∫ –∫–ª—é—á–∞–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
        TreeMap<Double, String> priceMap = new TreeMap<>();
        for (Map.Entry<String, Double> entry : productPrices.entrySet()) {
            priceMap.put(entry.getValue(), entry.getKey());
        }

        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—î—ó TreeMap
        System.out.println("–¢–æ–≤–∞—Ä–∏, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ —Ü—ñ–Ω–æ—é:");
        for (Map.Entry<Double, String> entry : priceMap.entrySet()) {
            System.out.printf("  %.2f –≥—Ä–Ω: %s\n", entry.getKey(), entry.getValue());
        }

        // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö –±—é–¥–∂–µ—Ç—ñ–≤
        double[] budgets = {50.0, 100.0, 200.0, 300.0, 10.0};

        System.out.println("\n–ü–æ—à—É–∫ –Ω–∞–π–¥–æ—Ä–æ–∂—á–æ–≥–æ —Ç–æ–≤–∞—Ä—É –≤ –º–µ–∂–∞—Ö –±—é–¥–∂–µ—Ç—É:");
        for (double budget : budgets) {
            System.out.printf("\n–ë—é–¥–∂–µ—Ç: %.2f –≥—Ä–Ω:\n", budget);
            Map.Entry<Double, String> result = getLowerEntry(priceMap, budget);

            if (result != null) {
                System.out.printf("‚Üí –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä: %s –∑–∞ %.2f –≥—Ä–Ω\n",
                    result.getValue(), result.getKey());
            } else {
                System.out.println("‚Üí –ñ–æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É –≤ –º–µ–∂–∞—Ö –±—é–¥–∂–µ—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }
        }
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–æ–¥—ñ—è–º–∏
    public void demonstrateEvents() {
        System.out.println("\nüìÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –ü–æ–¥—ñ—ó –∫–∞–ª–µ–Ω–¥–∞—Ä—è");
        System.out.println("=" .repeat(50));

        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–¥—ñ–π
        System.out.println("–í—Å—ñ –ø–æ–¥—ñ—ó –∫–∞–ª–µ–Ω–¥–∞—Ä—è:");
        for (Map.Entry<Date, String> entry : events.entrySet()) {
            System.out.printf("  %s: %s\n",
                new java.text.SimpleDateFormat("dd.MM.yyyy").format(entry.getKey()),
                entry.getValue());
        }

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞—Ç
        Calendar cal = Calendar.getInstance();
        Date[] testDates = new Date[5];

        cal.set(2024, Calendar.MARCH, 1);
        testDates[0] = cal.getTime();

        cal.set(2024, Calendar.JUNE, 15);
        testDates[1] = cal.getTime();

        cal.set(2024, Calendar.SEPTEMBER, 30);
        testDates[2] = cal.getTime();

        cal.set(2024, Calendar.NOVEMBER, 15);
        testDates[3] = cal.getTime();

        cal.set(2025, Calendar.JANUARY, 1);
        testDates[4] = cal.getTime();

        System.out.println("\n–ü–æ—à—É–∫ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–æ–¥—ñ—ó –ø–µ—Ä–µ–¥ –∑–∞–¥–∞–Ω–æ—é –¥–∞—Ç–æ—é:");
        java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("dd.MM.yyyy");

        for (Date testDate : testDates) {
            System.out.printf("\n–î–∞—Ç–∞: %s:\n", dateFormat.format(testDate));
            Map.Entry<Date, String> result = getLowerEntry(events, testDate);

            if (result != null) {
                System.out.printf("‚Üí –û—Å—Ç–∞–Ω–Ω—è –ø–æ–¥—ñ—è –ø–µ—Ä–µ–¥ —Ü—ñ—î—é –¥–∞—Ç–æ—é: %s (%s)\n",
                    result.getValue(), dateFormat.format(result.getKey()));
            } else {
                System.out.println("‚Üí –ù–µ–º–∞—î –ø–æ–¥—ñ–π –ø–µ—Ä–µ–¥ —Ü—ñ—î—é –¥–∞—Ç–æ—é");
            }
        }
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≥—Ä–∞–Ω–∏—á–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
    public void demonstrateEdgeCases() {
        System.out.println("\n‚ö†Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –ì—Ä–∞–Ω–∏—á–Ω—ñ –≤–∏–ø–∞–¥–∫–∏");
        System.out.println("=" .repeat(50));

        // –ü–æ—Ä–æ–∂–Ω—è TreeMap
        TreeMap<Integer, String> emptyMap = new TreeMap<>();
        System.out.println("1. –ü–æ—à—É–∫ –≤ –ø–æ—Ä–æ–∂–Ω—ñ–π TreeMap:");
        getLowerEntry(emptyMap, 50);

        // TreeMap –∑ –æ–¥–Ω–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º
        TreeMap<Integer, String> singleMap = new TreeMap<>();
        singleMap.put(100, "–Ñ–¥–∏–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç");
        System.out.println("\n2. –ü–æ—à—É–∫ –≤ TreeMap –∑ –æ–¥–Ω–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º:");
        System.out.println("   –ï–ª–µ–º–µ–Ω—Ç: 100 -> –Ñ–¥–∏–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç");
        System.out.println("   –ü–æ—à—É–∫ –¥–ª—è –∫–ª—é—á–∞ 50:");
        getLowerEntry(singleMap, 50);
        System.out.println("   –ü–æ—à—É–∫ –¥–ª—è –∫–ª—é—á–∞ 150:");
        getLowerEntry(singleMap, 150);

        // –ü–æ—à—É–∫ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
        System.out.println("\n3. –ü–æ—à—É–∫ –∫–ª—é—á–∞, –º–µ–Ω—à–æ–≥–æ –∑–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π:");
        Integer minKey = studentGrades.firstKey();
        System.out.printf("   –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –∫–ª—é—á: %d\n", minKey);
        System.out.printf("   –ü–æ—à—É–∫ –¥–ª—è –∫–ª—é—á–∞ %d:\n", minKey);
        getLowerEntry(studentGrades, minKey);

        // Null –∫–ª—é—á
        System.out.println("\n4. –ü–æ—à—É–∫ –∑ null –∫–ª—é—á–µ–º:");
        getLowerEntry(studentGrades, null);
    }

    // –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
    public void interactiveMode() {
        Scanner scanner = new Scanner(System.in);

        System.out.println("\nüéÆ –Ü–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ò–ô –†–ï–ñ–ò–ú");
        System.out.println("=" .repeat(30));

        while (true) {
            System.out.println("\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:");
            System.out.println("1. –ü–æ—à—É–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑ –æ—Ü—ñ–Ω–∫–æ—é");
            System.out.println("2. –ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—É –∑–∞ –±—é–¥–∂–µ—Ç–æ–º");
            System.out.println("3. –ü–æ—à—É–∫ –ø–æ–¥—ñ—ó –∑–∞ –¥–∞—Ç–æ—é");
            System.out.println("4. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ");
            System.out.println("0. –í–∏–π—Ç–∏");
            System.out.print("–í–∞—à –≤–∏–±—ñ—Ä: ");

            try {
                int choice = scanner.nextInt();

                switch (choice) {
                    case 1:
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å –æ—Ü—ñ–Ω–∫—É (0-100): ");
                        int grade = scanner.nextInt();
                        System.out.printf("–ü–æ—à—É–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑ –Ω–∞–π–≤–∏—â–æ—é –æ—Ü—ñ–Ω–∫–æ—é, –º–µ–Ω—à–æ—é –∑–∞ %d:\n", grade);
                        getLowerEntry(studentGrades, grade);
                        break;

                    case 2:
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å –±—é–¥–∂–µ—Ç (–≥—Ä–Ω): ");
                        double budget = scanner.nextDouble();
                        TreeMap<Double, String> priceMap = new TreeMap<>();
                        for (Map.Entry<String, Double> entry : productPrices.entrySet()) {
                            priceMap.put(entry.getValue(), entry.getKey());
                        }
                        System.out.printf("–ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—É –≤ –º–µ–∂–∞—Ö –±—é–¥–∂–µ—Ç—É %.2f –≥—Ä–Ω:\n", budget);
                        getLowerEntry(priceMap, budget);
                        break;

                    case 3:
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2024): ");
                        int year = scanner.nextInt();
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—è—Ü—å (1-12): ");
                        int month = scanner.nextInt();
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å –¥–µ–Ω—å (1-31): ");
                        int day = scanner.nextInt();

                        Calendar cal = Calendar.getInstance();
                        cal.set(year, month - 1, day); // –º—ñ—Å—è—Ü—ñ –≤ Calendar –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ 0
                        Date searchDate = cal.getTime();

                        System.out.printf("–ü–æ—à—É–∫ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–æ–¥—ñ—ó –ø–µ—Ä–µ–¥ %02d.%02d.%04d:\n", day, month, year);
                        getLowerEntry(events, searchDate);
                        break;

                    case 4:
                        demonstrateStudentGrades();
                        demonstrateProductPrices();
                        demonstrateEvents();
                        break;

                    case 0:
                        return;

                    default:
                        System.out.println("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!");
                }
            } catch (Exception e) {
                System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è!");
                scanner.nextLine(); // –æ—á–∏—â–∞—î–º–æ –±—É—Ñ–µ—Ä
            }
        }
    }

    public static void main(String[] args) {
        System.out.println("=== –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ 3 - –ó–∞–≤–¥–∞–Ω–Ω—è 1 ===");
        System.out.println("TreeMap: –ø–æ—à—É–∫ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –∫–ª—é—á–∞, —Å—Ç—Ä–æ–≥–æ –º–µ–Ω—à–æ–≥–æ –∑–∞ –¥–∞–Ω–∏–π");
        System.out.println("–°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–∏ –¢–í-43, –ø—Ä—ñ–∑–≤–∏—â–µ Step, –≤–∞—Ä—ñ–∞–Ω—Ç 16\n");

        Lr3_1 program = new Lr3_1();

// Demonstration of main functionality
        program.demonstrateStudentGrades();
        program.demonstrateProductPrices();
        program.demonstrateEvents();
        program.demonstrateEdgeCases();

// Interactive mode
        program.interactiveMode();

        System.out.println("\n‚úÖ –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!");
    }
}