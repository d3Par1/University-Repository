// –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ 3 - –ó–∞–≤–¥–∞–Ω–Ω—è 3
// TreeSet: —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ TreeSet, –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤ —ñ –≤–∏–≤–µ–¥–µ–Ω–Ω—è
// –ê–≤—Ç–æ—Ä: –°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–∏ –¢–í-43, –ø—Ä—ñ–∑–≤–∏—â–µ Step
// –í–∞—Ä—ñ–∞–Ω—Ç 16

import java.util.*;

// –ö–ª–∞—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏
class Color implements Comparable<Color> {
    private String name;
    private String hexCode;
    private String category;
    private int intensity; // —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å –≤—ñ–¥ 1 –¥–æ 10

    public Color(String name, String hexCode, String category, int intensity) {
        this.name = name;
        this.hexCode = hexCode;
        this.category = category;
        this.intensity = Math.max(1, Math.min(10, intensity)); // –æ–±–º–µ–∂—É—î–º–æ 1-10
    }

    // –ì–µ—Ç—Ç–µ—Ä–∏
    public String getName() { return name; }
    public String getHexCode() { return hexCode; }
    public String getCategory() { return category; }
    public int getIntensity() { return intensity; }

    // –°–µ—Ç—Ç–µ—Ä–∏
    public void setName(String name) { this.name = name; }
    public void setHexCode(String hexCode) { this.hexCode = hexCode; }
    public void setCategory(String category) { this.category = category; }
    public void setIntensity(int intensity) {
        this.intensity = Math.max(1, Math.min(10, intensity));
    }

    // –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è Comparable –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤ TreeSet
    @Override
    public int compareTo(Color other) {
        // –°–ø–æ—á–∞—Ç–∫—É —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
        int categoryComparison = this.category.compareTo(other.category);
        if (categoryComparison != 0) {
            return categoryComparison;
        }

        // –ü–æ—Ç—ñ–º –∑–∞ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—é (–≤ –ø–æ—Ä—è–¥–∫—É —Å–ø–∞–¥–∞–Ω–Ω—è)
        int intensityComparison = Integer.compare(other.intensity, this.intensity);
        if (intensityComparison != 0) {
            return intensityComparison;
        }

        // –ù–∞—Ä–µ—à—Ç—ñ –∑–∞ –Ω–∞–∑–≤–æ—é
        return this.name.compareTo(other.name);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Color color = (Color) obj;
        return Objects.equals(name, color.name) &&
               Objects.equals(hexCode, color.hexCode);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, hexCode);
    }

    @Override
    public String toString() {
        return String.format("%s (%s) - %s, —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å: %d",
            name, hexCode, category, intensity);
    }
}

public class Lr3_3 {
    private TreeSet<String> simpleColors;
    private TreeSet<Color> complexColors;
    private TreeSet<String> customSortedColors;

    public Lr3_3() {
        initializeTreeSets();
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TreeSet-—ñ–≤
    private void initializeTreeSets() {
        // –ü—Ä–æ—Å—Ç–∏–π TreeSet –∑ –Ω–∞–∑–≤–∞–º–∏ –∫–æ–ª—å–æ—Ä—ñ–≤ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º)
        simpleColors = new TreeSet<>();

        // TreeSet –∑ –æ–±'—î–∫—Ç–∞–º–∏ Color (—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –≤–ª–∞—Å–Ω–∏–º Comparable)
        complexColors = new TreeSet<>();

        // TreeSet –∑ –≤–ª–∞—Å–Ω–∏–º –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–æ–º (—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é –Ω–∞–∑–≤–∏)
        customSortedColors = new TreeSet<>(new Comparator<String>() {
            @Override
            public int compare(String s1, String s2) {
                // –°–ø–æ—á–∞—Ç–∫—É –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é
                int lengthComparison = Integer.compare(s1.length(), s2.length());
                if (lengthComparison != 0) {
                    return lengthComparison;
                }
                // –ü–æ—Ç—ñ–º –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º
                return s1.compareTo(s2);
            }
        });
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ—Å—Ç–æ–≥–æ TreeSet –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏
    public void demonstrateSimpleColors() {
        System.out.println("\nüé® –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –ü—Ä–æ—Å—Ç–∏–π TreeSet –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏");
        System.out.println("=" .repeat(60));

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤ —É –¥–æ–≤—ñ–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
        String[] colorsToAdd = {
            "–ó–µ–ª–µ–Ω–∏–π", "–ß–µ—Ä–≤–æ–Ω–∏–π", "–°–∏–Ω—ñ–π", "–ñ–æ–≤—Ç–∏–π", "–§—ñ–æ–ª–µ—Ç–æ–≤–∏–π",
            "–ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π", "–†–æ–∂–µ–≤–∏–π", "–ö–æ—Ä–∏—á–Ω–µ–≤–∏–π", "–°—ñ—Ä–∏–π", "–ë—ñ–ª–∏–π",
            "–ß–æ—Ä–Ω–∏–π", "–ë—ñ—Ä—é–∑–æ–≤–∏–π", "–õ–∏–ª–æ–≤–∏–π", "–ó–æ–ª–æ—Ç–∏–π", "–°—Ä—ñ–±–Ω–∏–π"
        };

        System.out.println("–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤ —É –¥–æ–≤—ñ–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É:");
        for (String color : colorsToAdd) {
            boolean added = simpleColors.add(color);
            System.out.printf("  %s: %s\n", color, added ? "‚úÖ –î–æ–¥–∞–Ω–æ" : "‚ö†Ô∏è –í–∂–µ —ñ—Å–Ω—É—î");
        }

        // –°–ø—Ä–æ–±–∞ –¥–æ–¥–∞—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç
        System.out.println("\n–°–ø—Ä–æ–±–∞ –¥–æ–¥–∞—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç:");
        boolean addDuplicate = simpleColors.add("–ß–µ—Ä–≤–æ–Ω–∏–π");
        System.out.printf("  –ß–µ—Ä–≤–æ–Ω–∏–π: %s\n", addDuplicate ? "‚úÖ –î–æ–¥–∞–Ω–æ" : "‚ö†Ô∏è –î—É–±–ª—ñ–∫–∞—Ç –Ω–µ –¥–æ–¥–∞–Ω–æ");

        System.out.println("\nüìã –§—ñ–Ω–∞–ª—å–Ω–∏–π TreeSet (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º):");
        displayTreeSetInfo(simpleColors, "–ü—Ä–æ—Å—Ç—ñ –∫–æ–ª—å–æ—Ä–∏");

        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤
        demonstrateNavigationMethods();
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Å–∫–ª–∞–¥–Ω–æ–≥–æ TreeSet –∑ –æ–±'—î–∫—Ç–∞–º–∏ Color
    public void demonstrateComplexColors() {
        System.out.println("\nüåà –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: TreeSet –∑ –æ–±'—î–∫—Ç–∞–º–∏ Color");
        System.out.println("=" .repeat(60));

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤
        Color[] colorsToAdd = {
            new Color("–ß–µ—Ä–≤–æ–Ω–∏–π", "#FF0000", "–¢–µ–ø–ª–∏–π", 9),
            new Color("–°–≤—ñ—Ç–ª–æ-—á–µ—Ä–≤–æ–Ω–∏–π", "#FF6666", "–¢–µ–ø–ª–∏–π", 5),
            new Color("–¢–µ–º–Ω–æ-—á–µ—Ä–≤–æ–Ω–∏–π", "#990000", "–¢–µ–ø–ª–∏–π", 10),
            new Color("–°–∏–Ω—ñ–π", "#0000FF", "–•–æ–ª–æ–¥–Ω–∏–π", 8),
            new Color("–°–≤—ñ—Ç–ª–æ-—Å–∏–Ω—ñ–π", "#6666FF", "–•–æ–ª–æ–¥–Ω–∏–π", 4),
            new Color("–¢–µ–º–Ω–æ-—Å–∏–Ω—ñ–π", "#000099", "–•–æ–ª–æ–¥–Ω–∏–π", 10),
            new Color("–ó–µ–ª–µ–Ω–∏–π", "#00FF00", "–ü—Ä–∏—Ä–æ–¥–Ω–∏–π", 7),
            new Color("–õ—ñ—Å–æ–≤–∏–π –∑–µ–ª–µ–Ω–∏–π", "#228B22", "–ü—Ä–∏—Ä–æ–¥–Ω–∏–π", 8),
            new Color("–ñ–æ–≤—Ç–∏–π", "#FFFF00", "–¢–µ–ø–ª–∏–π", 6),
            new Color("–§—ñ–æ–ª–µ—Ç–æ–≤–∏–π", "#800080", "–•–æ–ª–æ–¥–Ω–∏–π", 7),
            new Color("–ë—ñ–ª–∏–π", "#FFFFFF", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π", 1),
            new Color("–ß–æ—Ä–Ω–∏–π", "#000000", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π", 10),
            new Color("–°—ñ—Ä–∏–π", "#808080", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π", 5)
        };

        System.out.println("–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤ (–±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ):");
        for (Color color : colorsToAdd) {
            boolean added = complexColors.add(color);
            System.out.printf("  %s: %s\n", color.getName(), added ? "‚úÖ –î–æ–¥–∞–Ω–æ" : "‚ö†Ô∏è –î—É–±–ª—ñ–∫–∞—Ç");
        }

        System.out.println("\nüìã TreeSet –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é ‚Üí —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å ‚Üí –Ω–∞–∑–≤–∞:");
        displayComplexColorsInfo();

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        showComplexColorStatistics();
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è TreeSet –∑ –≤–ª–∞—Å–Ω–∏–º –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–æ–º
    public void demonstrateCustomSortedColors() {
        System.out.println("\nüî§ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: TreeSet –∑ –≤–ª–∞—Å–Ω–∏–º –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–æ–º (–∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é –Ω–∞–∑–≤–∏)");
        System.out.println("=" .repeat(70));

        String[] colorsToAdd = {
            "–ß–µ—Ä–≤–æ–Ω–∏–π", "–°–∏–Ω—ñ–π", "–ó–µ–ª–µ–Ω–∏–π", "–§—ñ–æ–ª–µ—Ç–æ–≤–∏–π", "–ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π",
            "–†–æ–∂–µ–≤–∏–π", "–ö–æ—Ä–∏—á–Ω–µ–≤–∏–π", "–ë—ñ—Ä—é–∑–æ–≤–∏–π", "–ó–æ–ª–æ—Ç–∏–π", "–°—Ä—ñ–±–Ω–∏–π",
            "–ë–ª–∞–∫–∏—Ç–Ω–∏–π", "–ú–∞–ª–∏–Ω–æ–≤–∏–π", "–û–ª–∏–≤–∫–æ–≤–∏–π", "–ü–µ—Ä—Å–∏–∫–æ–≤–∏–π"
        };

        System.out.println("–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤:");
        for (String color : colorsToAdd) {
            boolean added = customSortedColors.add(color);
            System.out.printf("  %s (%d —Å–∏–º–≤–æ–ª—ñ–≤): %s\n",
                color, color.length(), added ? "‚úÖ –î–æ–¥–∞–Ω–æ" : "‚ö†Ô∏è –î—É–±–ª—ñ–∫–∞—Ç");
        }

        System.out.println("\nüìã TreeSet –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é –Ω–∞–∑–≤–∏ ‚Üí –∞–ª—Ñ–∞–≤—ñ—Ç:");
        displayTreeSetInfo(customSortedColors, "–ö–æ–ª—å–æ—Ä–∏ –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é");

        // –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é
        showLengthGrouping();
    }

    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ TreeSet
    private <T> void displayTreeSetInfo(TreeSet<T> treeSet, String name) {
        System.out.println(name + ":");
        System.out.println("  –†–æ–∑–º—ñ—Ä: " + treeSet.size());
        System.out.println("  –ü–æ—Ä–æ–∂–Ω—ñ–π: " + (treeSet.isEmpty() ? "–¢–∞–∫" : "–ù—ñ"));

        if (!treeSet.isEmpty()) {
            System.out.println("  –ü–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç: " + treeSet.first());
            System.out.println("  –û—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç: " + treeSet.last());
            System.out.println("  –í—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏:");
            int index = 1;
            for (T element : treeSet) {
                System.out.printf("    %d. %s\n", index++, element);
            }
        }
        System.out.println();
    }

    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–∫–ª–∞–¥–Ω—ñ –∫–æ–ª—å–æ—Ä–∏
    private void displayComplexColorsInfo() {
        if (complexColors.isEmpty()) {
            System.out.println("TreeSet –ø–æ—Ä–æ–∂–Ω—ñ–π");
            return;
        }

        System.out.printf("–†–æ–∑–º—ñ—Ä: %d –∫–æ–ª—å–æ—Ä—ñ–≤\n", complexColors.size());
        System.out.println("–ö–æ–ª—å–æ—Ä–∏ (–≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ):");

        int index = 1;
        String currentCategory = "";
        for (Color color : complexColors) {
            if (!color.getCategory().equals(currentCategory)) {
                currentCategory = color.getCategory();
                System.out.printf("\n  === %s –∫–æ–ª—å–æ—Ä–∏ ===\n", currentCategory);
            }
            System.out.printf("    %d. %s\n", index++, color);
        }
        System.out.println();
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ TreeSet
    private void demonstrateNavigationMethods() {
        System.out.println("\nüß≠ –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –º–µ—Ç–æ–¥–∏ TreeSet:");

        if (simpleColors.isEmpty()) {
            System.out.println("TreeSet –ø–æ—Ä–æ–∂–Ω—ñ–π");
            return;
        }

        String testColor = "–ó–µ–ª–µ–Ω–∏–π";

        System.out.printf("–¢–µ—Å—Ç–æ–≤–∏–π –∫–æ–ª—ñ—Ä: %s\n", testColor);
        System.out.printf("  lower(\"%s\"): %s\n", testColor, simpleColors.lower(testColor));
        System.out.printf("  floor(\"%s\"): %s\n", testColor, simpleColors.floor(testColor));
        System.out.printf("  ceiling(\"%s\"): %s\n", testColor, simpleColors.ceiling(testColor));
        System.out.printf("  higher(\"%s\"): %s\n", testColor, simpleColors.higher(testColor));

        // –ü—ñ–¥–º–Ω–æ–∂–∏–Ω–∏
        String fromColor = "–ñ";
        String toColor = "–°";
        System.out.printf("\n–ü—ñ–¥–º–Ω–æ–∂–∏–Ω–∞ –≤—ñ–¥ \"%s\" –¥–æ \"%s\":\n", fromColor, toColor);
        TreeSet<String> subset = new TreeSet<>(simpleColors.subSet(fromColor, toColor));
        for (String color : subset) {
            System.out.println("    " + color);
        }

        // –ì–æ–ª–æ–≤–Ω–∞ —Ç–∞ —Ö–≤–æ—Å—Ç–æ–≤–∞ —á–∞—Å—Ç–∏–Ω–∏
        System.out.printf("\n–ì–æ–ª–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ (–¥–æ \"%s\"):\n", "–ñ");
        TreeSet<String> headSet = new TreeSet<>(simpleColors.headSet("–ñ"));
        for (String color : headSet) {
            System.out.println("    " + color);
        }

        System.out.printf("\n–•–≤–æ—Å—Ç–æ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ (–≤—ñ–¥ \"%s\"):\n", "–°");
        TreeSet<String> tailSet = new TreeSet<>(simpleColors.tailSet("–°"));
        for (String color : tailSet) {
            System.out.println("    " + color);
        }
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–Ω–∏—Ö –∫–æ–ª—å–æ—Ä—ñ–≤
    private void showComplexColorStatistics() {
        System.out.println("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª—å–æ—Ä—ñ–≤:");

        // –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
        Map<String, Long> categoryCount = complexColors.stream()
            .collect(java.util.stream.Collectors.groupingBy(
                Color::getCategory,
                java.util.stream.Collectors.counting()));

        System.out.println("–ó–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏:");
        for (Map.Entry<String, Long> entry : categoryCount.entrySet()) {
            System.out.printf("  %s: %d –∫–æ–ª—å–æ—Ä—ñ–≤\n", entry.getKey(), entry.getValue());
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—ñ
        OptionalDouble avgIntensity = complexColors.stream()
            .mapToInt(Color::getIntensity)
            .average();

        int minIntensity = complexColors.stream()
            .mapToInt(Color::getIntensity)
            .min().orElse(0);

        int maxIntensity = complexColors.stream()
            .mapToInt(Color::getIntensity)
            .max().orElse(0);

        System.out.printf("–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å: –º—ñ–Ω=%d, –º–∞–∫—Å=%d, —Å–µ—Ä–µ–¥–Ω—è=%.1f\n",
            minIntensity, maxIntensity, avgIntensity.orElse(0.0));
    }

    // –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é –Ω–∞–∑–≤–∏
    private void showLengthGrouping() {
        System.out.println("\nüìè –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é –Ω–∞–∑–≤–∏:");

        Map<Integer, List<String>> lengthGroups = new TreeMap<>();

        for (String color : customSortedColors) {
            int length = color.length();
            lengthGroups.computeIfAbsent(length, k -> new ArrayList<>()).add(color);
        }

        for (Map.Entry<Integer, List<String>> entry : lengthGroups.entrySet()) {
            System.out.printf("  %d —Å–∏–º–≤–æ–ª—ñ–≤ (%d –∫–æ–ª—å–æ—Ä—ñ–≤): %s\n",
                entry.getKey(), entry.getValue().size(), entry.getValue());
        }
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ TreeSet
    public void demonstrateTreeSetOperations() {
        System.out.println("\nüõ†Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –û–ø–µ—Ä–∞—Ü—ñ—ó –∑ TreeSet");
        System.out.println("=" .repeat(50));

        TreeSet<Integer> numbers = new TreeSet<>();

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª —É –¥–æ–≤—ñ–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
        Integer[] numbersToAdd = {5, 2, 8, 1, 9, 3, 7, 4, 6, 10};

        System.out.println("–î–æ–¥–∞–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª —É –¥–æ–≤—ñ–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É:");
        for (Integer num : numbersToAdd) {
            numbers.add(num);
            System.out.printf("  –î–æ–¥–∞–Ω–æ %d, TreeSet —Ç–µ–ø–µ—Ä: %s\n", num, numbers);
        }

        System.out.println("\n–û–ø–µ—Ä–∞—Ü—ñ—ó –∑ —á–∏—Å–ª–∞–º–∏:");
        System.out.printf("  –†–æ–∑–º—ñ—Ä: %d\n", numbers.size());
        System.out.printf("  –ú—ñ–Ω—ñ–º—É–º: %d\n", numbers.first());
        System.out.printf("  –ú–∞–∫—Å–∏–º—É–º: %d\n", numbers.last());
        System.out.printf("  –ú—ñ—Å—Ç–∏—Ç—å 5: %s\n", numbers.contains(5) ? "–¢–∞–∫" : "–ù—ñ");
        System.out.printf("  –ú—ñ—Å—Ç–∏—Ç—å 15: %s\n", numbers.contains(15) ? "–¢–∞–∫" : "–ù—ñ");

        // –í–∏–¥–∞–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        System.out.println("\n–í–∏–¥–∞–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤:");
        System.out.printf("  –í–∏–¥–∞–ª–µ–Ω–æ 5: %s\n", numbers.remove(5) ? "–¢–∞–∫" : "–ù—ñ");
        System.out.printf("  TreeSet –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: %s\n", numbers);

        // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ
        System.out.printf("  –í–∏–¥–∞–ª–µ–Ω–æ –ø–µ—Ä—à–∏–π (%d): %s\n", numbers.first(), numbers.pollFirst());
        System.out.printf("  –í–∏–¥–∞–ª–µ–Ω–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π (%d): %s\n", numbers.last(), numbers.pollLast());
        System.out.printf("  TreeSet –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: %s\n", numbers);
    }

    // –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
    public void interactiveMode() {
        Scanner scanner = new Scanner(System.in);

        System.out.println("\nüéÆ –Ü–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ò–ô –†–ï–ñ–ò–ú");
        System.out.println("=" .repeat(30));

        while (true) {
            System.out.println("\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:");
            System.out.println("1. –î–æ–¥–∞—Ç–∏ –ø—Ä–æ—Å—Ç–∏–π –∫–æ–ª—ñ—Ä");
            System.out.println("2. –î–æ–¥–∞—Ç–∏ —Å–∫–ª–∞–¥–Ω–∏–π –∫–æ–ª—ñ—Ä");
            System.out.println("3. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ TreeSet-–∏");
            System.out.println("4. –ü–æ—à—É–∫ –∫–æ–ª—å–æ—Ä—É");
            System.out.println("5. –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–ª—ñ—Ä");
            System.out.println("6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
            System.out.println("0. –í–∏–π—Ç–∏");
            System.out.print("–í–∞—à –≤–∏–±—ñ—Ä: ");

            try {
                int choice = scanner.nextInt();
                scanner.nextLine(); // —Å–ø–æ–∂–∏–≤–∞—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫

                switch (choice) {
                    case 1:
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–ª—å–æ—Ä—É: ");
                        String colorName = scanner.nextLine();
                        boolean added = simpleColors.add(colorName);
                        System.out.printf("–ö–æ–ª—ñ—Ä \"%s\": %s\n", colorName,
                            added ? "‚úÖ –î–æ–¥–∞–Ω–æ" : "‚ö†Ô∏è –í–∂–µ —ñ—Å–Ω—É—î");
                        break;

                    case 2:
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–ª—å–æ—Ä—É: ");
                        String name = scanner.nextLine();
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å hex –∫–æ–¥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, #FF0000): ");
                        String hex = scanner.nextLine();
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (–¢–µ–ø–ª–∏–π/–•–æ–ª–æ–¥–Ω–∏–π/–ü—Ä–∏—Ä–æ–¥–Ω–∏–π/–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π): ");
                        String category = scanner.nextLine();
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å (1-10): ");
                        int intensity = scanner.nextInt();

                        Color newColor = new Color(name, hex, category, intensity);
                        boolean addedComplex = complexColors.add(newColor);
                        System.out.printf("–ö–æ–ª—ñ—Ä \"%s\": %s\n", name,
                            addedComplex ? "‚úÖ –î–æ–¥–∞–Ω–æ" : "‚ö†Ô∏è –í–∂–µ —ñ—Å–Ω—É—î");
                        break;

                    case 3:
                        displayTreeSetInfo(simpleColors, "–ü—Ä–æ—Å—Ç—ñ –∫–æ–ª—å–æ—Ä–∏");
                        displayComplexColorsInfo();
                        displayTreeSetInfo(customSortedColors, "–ö–æ–ª—å–æ—Ä–∏ –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é");
                        break;

                    case 4:
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–ª—å–æ—Ä—É –¥–ª—è –ø–æ—à—É–∫—É: ");
                        String searchColor = scanner.nextLine();

                        boolean foundSimple = simpleColors.contains(searchColor);
                        boolean foundCustom = customSortedColors.contains(searchColor);

                        System.out.printf("–£ –ø—Ä–æ—Å—Ç–∏—Ö –∫–æ–ª—å–æ—Ä–∞—Ö: %s\n",
                            foundSimple ? "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ" : "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                        System.out.printf("–£ –∫–æ–ª—å–æ—Ä–∞—Ö –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é: %s\n",
                            foundCustom ? "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ" : "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ");

                        // –ü–æ—à—É–∫ –≤ —Å–∫–ª–∞–¥–Ω–∏—Ö –∫–æ–ª—å–æ—Ä–∞—Ö
                        boolean foundComplex = complexColors.stream()
                            .anyMatch(c -> c.getName().equalsIgnoreCase(searchColor));
                        System.out.printf("–£ —Å–∫–ª–∞–¥–Ω–∏—Ö –∫–æ–ª—å–æ—Ä–∞—Ö: %s\n",
                            foundComplex ? "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ" : "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                        break;

                    case 5:
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–ª—å–æ—Ä—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ");
                        String removeColor = scanner.nextLine();

                        boolean removedSimple = simpleColors.remove(removeColor);
                        boolean removedCustom = customSortedColors.remove(removeColor);

                        // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑—ñ —Å–∫–ª–∞–¥–Ω–∏—Ö –∫–æ–ª—å–æ—Ä—ñ–≤
                        boolean removedComplex = complexColors.removeIf(
                            c -> c.getName().equalsIgnoreCase(removeColor));

                        System.out.printf("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è \"%s\":\n", removeColor);
                        System.out.printf("  –ü—Ä–æ—Å—Ç—ñ –∫–æ–ª—å–æ—Ä–∏: %s\n",
                            removedSimple ? "‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ" : "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                        System.out.printf("  –ö–æ–ª—å–æ—Ä–∏ –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é: %s\n",
                            removedCustom ? "‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ" : "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                        System.out.printf("  –°–∫–ª–∞–¥–Ω—ñ –∫–æ–ª—å–æ—Ä–∏: %s\n",
                            removedComplex ? "‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ" : "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                        break;

                    case 6:
                        System.out.printf("üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n");
                        System.out.printf("  –ü—Ä–æ—Å—Ç–∏—Ö –∫–æ–ª—å–æ—Ä—ñ–≤: %d\n", simpleColors.size());
                        System.out.printf("  –°–∫–ª–∞–¥–Ω–∏—Ö –∫–æ–ª—å–æ—Ä—ñ–≤: %d\n", complexColors.size());
                        System.out.printf("  –ö–æ–ª—å–æ—Ä—ñ–≤ –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é: %d\n", customSortedColors.size());

                        if (!complexColors.isEmpty()) {
                            showComplexColorStatistics();
                        }
                        break;

                    case 0:
                        return;

                    default:
                        System.out.println("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!");
                }
            } catch (Exception e) {
                System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è!");
                scanner.nextLine(); // –æ—á–∏—â–∞—î–º–æ –±—É—Ñ–µ—Ä
            }
        }
    }

    public static void main(String[] args) {
        System.out.println("=== –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ 3 - –ó–∞–≤–¥–∞–Ω–Ω—è 3 ===");
        System.out.println("TreeSet: —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ TreeSet –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏");
        System.out.println("–°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–∏ –¢–í-43, –ø—Ä—ñ–∑–≤–∏—â–µ Step, –≤–∞—Ä—ñ–∞–Ω—Ç 16\n");

        Lr3_3 program = new Lr3_3();

        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É
        program.demonstrateSimpleColors();
        program.demonstrateComplexColors();
        program.demonstrateCustomSortedColors();
        program.demonstrateTreeSetOperations();

        // –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
        program.interactiveMode();

        System.out.println("\n‚úÖ –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!");
    }
}