// –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ 3 - –ó–∞–≤–¥–∞–Ω–Ω—è 2
// HashSet: –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–∑–Ω–∞—á–µ–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫—ñ–Ω–µ—Ü—å HashSet
// –ê–≤—Ç–æ—Ä: –°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–∏ –¢–í-43, –ø—Ä—ñ–∑–≤–∏—â–µ Step
// –í–∞—Ä—ñ–∞–Ω—Ç 16

import java.util.*;

public class Lr3_2 {
    private HashSet<String> colors;
    private HashSet<Integer> numbers;
    private HashSet<Double> prices;

    public  Lr3_2() {
        initializeHashSets();
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è HashSet-—ñ–≤ –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
    private void initializeHashSets() {
        // HashSet –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏
        colors = new HashSet<>();
        colors.add("–ß–µ—Ä–≤–æ–Ω–∏–π");
        colors.add("–°–∏–Ω—ñ–π");
        colors.add("–ó–µ–ª–µ–Ω–∏–π");
        colors.add("–ñ–æ–≤—Ç–∏–π");
        colors.add("–ë—ñ–ª–∏–π");
        colors.add("–ß–æ—Ä–Ω–∏–π");
        colors.add("–§—ñ–æ–ª–µ—Ç–æ–≤–∏–π");
        colors.add("–ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π");

        // HashSet –∑ —á–∏—Å–ª–∞–º–∏
        numbers = new HashSet<>();
        numbers.add(10);
        numbers.add(25);
        numbers.add(5);
        numbers.add(30);
        numbers.add(15);
        numbers.add(40);
        numbers.add(20);

        // HashSet –∑ —Ü—ñ–Ω–∞–º–∏
        prices = new HashSet<>();
        prices.add(15.50);
        prices.add(25.99);
        prices.add(100.00);
        prices.add(75.25);
        prices.add(50.80);
        prices.add(200.15);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ HashSet
    // –û—Å–∫—ñ–ª—å–∫–∏ HashSet –Ω–µ –º–∞—î –ø–æ–Ω—è—Ç—Ç—è "–∫—ñ–Ω–µ—Ü—å" (–Ω–µ–º–∞—î –ø–æ—Ä—è–¥–∫—É), –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç
    public <T> void addElementToHashSet(HashSet<T> hashSet, T element, String setName) {
        System.out.println("\nüìù –î–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –¥–æ " + setName);
        System.out.println("–ï–ª–µ–º–µ–Ω—Ç –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è: " + element);
        System.out.println("–°—Ç–∞–Ω HashSet –¥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è: " + hashSet);
        System.out.println("–†–æ–∑–º—ñ—Ä –¥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è: " + hashSet.size());

        boolean added = hashSet.add(element);

        if (added) {
            System.out.println("‚úÖ –ï–ª–µ–º–µ–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!");
        } else {
            System.out.println("‚ö†Ô∏è –ï–ª–µ–º–µ–Ω—Ç –Ω–µ –¥–æ–¥–∞–Ω–æ (–≤–∂–µ —ñ—Å–Ω—É—î –≤ –º–Ω–æ–∂–∏–Ω—ñ)");
        }

        System.out.println("–°—Ç–∞–Ω HashSet –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è: " + hashSet);
        System.out.println("–†–æ–∑–º—ñ—Ä –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è: " + hashSet.size());

    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏
    public void demonstrateColors() {
        System.out.println("\nüé® –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –†–æ–±–æ—Ç–∞ –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏");
        System.out.println("=" .repeat(50));

        // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
        System.out.println("–ü–æ—á–∞—Ç–∫–æ–≤–∏–π HashSet –∫–æ–ª—å–æ—Ä—ñ–≤:");
        displayHashSetInfo(colors, "–ö–æ–ª—å–æ—Ä–∏");

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–æ–ª—å–æ—Ä—ñ–≤
        String[] newColors = {"–†–æ–∂–µ–≤–∏–π", "–°—ñ—Ä–∏–π", "–ö–æ—Ä–∏—á–Ω–µ–≤–∏–π", "–ß–µ—Ä–≤–æ–Ω–∏–π", "–ó–æ–ª–æ—Ç–∏–π"};

        for (String color : newColors) {
            addElementToHashSet(colors, color, "HashSet –∫–æ–ª—å–æ—Ä—ñ–≤");
        }

        System.out.println("\nüîç –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω HashSet –∫–æ–ª—å–æ—Ä—ñ–≤:");
        displayHashSetInfo(colors, "–ö–æ–ª—å–æ—Ä–∏");
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ —á–∏—Å–ª–∞–º–∏
    public void demonstrateNumbers() {
        System.out.println("\nüî¢ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –†–æ–±–æ—Ç–∞ –∑ —á–∏—Å–ª–∞–º–∏");
        System.out.println("=" .repeat(50));

        // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
        System.out.println("–ü–æ—á–∞—Ç–∫–æ–≤–∏–π HashSet —á–∏—Å–µ–ª:");
        displayHashSetInfo(numbers, "–ß–∏—Å–ª–∞");

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —á–∏—Å–µ–ª
        Integer[] newNumbers = {35, 50, 10, 45, 60, 25, 80};

        for (Integer number : newNumbers) {
            addElementToHashSet(numbers, number, "HashSet —á–∏—Å–µ–ª");
        }

        System.out.println("\nüîç –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω HashSet —á–∏—Å–µ–ª:");
        displayHashSetInfo(numbers, "–ß–∏—Å–ª–∞");

        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        showNumberStatistics();
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ —Ü—ñ–Ω–∞–º–∏
    public void demonstratePrices() {
        System.out.println("\nüí∞ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –†–æ–±–æ—Ç–∞ –∑ —Ü—ñ–Ω–∞–º–∏");
        System.out.println("=" .repeat(50));

        // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
        System.out.println("–ü–æ—á–∞—Ç–∫–æ–≤–∏–π HashSet —Ü—ñ–Ω:");
        displayHashSetInfo(prices, "–¶—ñ–Ω–∏");

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ü—ñ–Ω
        Double[] newPrices = {125.75, 300.00, 75.25, 45.99, 500.50, 15.50};

        for (Double price : newPrices) {
            addElementToHashSet(prices, price, "HashSet —Ü—ñ–Ω");
        }

        System.out.println("\nüîç –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω HashSet —Ü—ñ–Ω:");
        displayHashSetInfo(prices, "–¶—ñ–Ω–∏");

        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        showPriceStatistics();
    }

    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ HashSet
    private <T> void displayHashSetInfo(HashSet<T> hashSet, String name) {
        System.out.println(name + ":");
        System.out.println("  –†–æ–∑–º—ñ—Ä: " + hashSet.size());
        System.out.println("  –ï–ª–µ–º–µ–Ω—Ç–∏: " + hashSet);
        System.out.println("  –ü–æ—Ä–æ–∂–Ω—ñ–π: " + (hashSet.isEmpty() ? "–¢–∞–∫" : "–ù—ñ"));
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∏—Å–ª–∞—Ö
    private void showNumberStatistics() {
        System.out.println("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∏—Å–ª–∞—Ö:");

        if (numbers.isEmpty()) {
            System.out.println("HashSet –ø–æ—Ä–æ–∂–Ω—ñ–π");
            return;
        }

        int min = Collections.min(numbers);
        int max = Collections.max(numbers);
        double average = numbers.stream().mapToInt(Integer::intValue).average().orElse(0.0);
        int sum = numbers.stream().mapToInt(Integer::intValue).sum();

        System.out.printf("  –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: %d\n", min);
        System.out.printf("  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: %d\n", max);
        System.out.printf("  –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è: %.2f\n", average);
        System.out.printf("  –°—É–º–∞ –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: %d\n", sum);

        // –ß–∏—Å–ª–∞ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
        long evenCount = numbers.stream().filter(n -> n % 2 == 0).count();
        long oddCount = numbers.size() - evenCount;

        System.out.printf("  –ü–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª: %d\n", evenCount);
        System.out.printf("  –ù–µ–ø–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª: %d\n", oddCount);
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü—ñ–Ω–∞—Ö
    private void showPriceStatistics() {
        System.out.println("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü—ñ–Ω–∞—Ö:");

        if (prices.isEmpty()) {
            System.out.println("HashSet –ø–æ—Ä–æ–∂–Ω—ñ–π");
            return;
        }

        double min = Collections.min(prices);
        double max = Collections.max(prices);
        double average = prices.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);
        double sum = prices.stream().mapToDouble(Double::doubleValue).sum();

        System.out.printf("  –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: %.2f –≥—Ä–Ω\n", min);
        System.out.printf("  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: %.2f –≥—Ä–Ω\n", max);
        System.out.printf("  –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞: %.2f –≥—Ä–Ω\n", average);
        System.out.printf("  –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: %.2f –≥—Ä–Ω\n", sum);

        // –¶—ñ–Ω–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
        long cheapCount = prices.stream().filter(p -> p < 50.0).count();
        long moderateCount = prices.stream().filter(p -> p >= 50.0 && p < 150.0).count();
        long expensiveCount = prices.stream().filter(p -> p >= 150.0).count();

        System.out.printf("  –î–µ—à–µ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ (< 50 –≥—Ä–Ω): %d\n", cheapCount);
        System.out.printf("  –ü–æ–º—ñ—Ä–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ (50-150 –≥—Ä–Ω): %d\n", moderateCount);
        System.out.printf("  –î–æ—Ä–æ–≥–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ (> 150 –≥—Ä–Ω): %d\n", expensiveCount);
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π HashSet
    public void demonstrateHashSetOperations() {
        System.out.println("\nüõ†Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –û—Å–Ω–æ–≤–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó HashSet");
        System.out.println("=" .repeat(50));

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ HashSet
        HashSet<String> fruits = new HashSet<>();

        System.out.println("1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ HashSet:");
        displayHashSetInfo(fruits, "–§—Ä—É–∫—Ç–∏");

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        System.out.println("\n2. –î–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤:");
        String[] fruitList = {"–Ø–±–ª—É–∫–æ", "–ë–∞–Ω–∞–Ω", "–ê–ø–µ–ª—å—Å–∏–Ω", "–ì—Ä—É—à–∞", "–ö–∏–≤–∏"};
        for (String fruit : fruitList) {
            fruits.add(fruit);
            System.out.printf("   –î–æ–¥–∞–Ω–æ: %s (—Ä–æ–∑–º—ñ—Ä —Ç–µ–ø–µ—Ä: %d)\n", fruit, fruits.size());
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        System.out.println("\n3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤:");
        String[] checkFruits = {"–Ø–±–ª—É–∫–æ", "–ú–∞–Ω–≥–æ", "–ë–∞–Ω–∞–Ω", "–ê–Ω–∞–Ω–∞—Å"};
        for (String fruit : checkFruits) {
            boolean contains = fruits.contains(fruit);
            System.out.printf("   %s: %s\n", fruit, contains ? "‚úÖ –Ñ" : "‚ùå –ù–µ–º–∞—î");
        }

        // –í–∏–¥–∞–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        System.out.println("\n4. –í–∏–¥–∞–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤:");
        String[] removeList = {"–ì—Ä—É—à–∞", "–ú–∞–Ω–≥–æ", "–ö–∏–≤–∏"};
        for (String fruit : removeList) {
            boolean removed = fruits.remove(fruit);
            System.out.printf("   %s: %s (—Ä–æ–∑–º—ñ—Ä —Ç–µ–ø–µ—Ä: %d)\n",
                fruit, removed ? "‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ" : "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ", fruits.size());
        }

        System.out.println("\n5. –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω:");
        displayHashSetInfo(fruits, "–§—Ä—É–∫—Ç–∏");
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –º–Ω–æ–∂–∏–Ω–∞–º–∏
    public void demonstrateSetOperations() {
        System.out.println("\nüîó –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –û–ø–µ—Ä–∞—Ü—ñ—ó –∑ –º–Ω–æ–∂–∏–Ω–∞–º–∏");
        System.out.println("=" .repeat(50));

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–≤–æ—Ö –º–Ω–æ–∂–∏–Ω
        HashSet<Integer> set1 = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5, 6));
        HashSet<Integer> set2 = new HashSet<>(Arrays.asList(4, 5, 6, 7, 8, 9));

        System.out.println("–ú–Ω–æ–∂–∏–Ω–∞ 1: " + set1);
        System.out.println("–ú–Ω–æ–∂–∏–Ω–∞ 2: " + set2);

        // –û–±'—î–¥–Ω–∞–Ω–Ω—è (union)
        HashSet<Integer> union = new HashSet<>(set1);
        union.addAll(set2);
        System.out.println("\n–û–±'—î–¥–Ω–∞–Ω–Ω—è (union): " + union);

        // –ü–µ—Ä–µ—Ç–∏–Ω (intersection)
        HashSet<Integer> intersection = new HashSet<>(set1);
        intersection.retainAll(set2);
        System.out.println("–ü–µ—Ä–µ—Ç–∏–Ω (intersection): " + intersection);

        // –†—ñ–∑–Ω–∏—Ü—è (difference)
        HashSet<Integer> difference = new HashSet<>(set1);
        difference.removeAll(set2);
        System.out.println("–†—ñ–∑–Ω–∏—Ü—è (set1 - set2): " + difference);

        // –°–∏–º–µ—Ç—Ä–∏—á–Ω–∞ —Ä—ñ–∑–Ω–∏—Ü—è
        HashSet<Integer> symmetricDiff = new HashSet<>(union);
        symmetricDiff.removeAll(intersection);
        System.out.println("–°–∏–º–µ—Ç—Ä–∏—á–Ω–∞ —Ä—ñ–∑–Ω–∏—Ü—è: " + symmetricDiff);
    }

    // –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
    public void interactiveMode() {
        Scanner scanner = new Scanner(System.in);

        System.out.println("\nüéÆ –Ü–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ò–ô –†–ï–ñ–ò–ú");
        System.out.println("=" .repeat(30));

        while (true) {
            System.out.println("\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:");
            System.out.println("1. –î–æ–¥–∞—Ç–∏ –∫–æ–ª—ñ—Ä");
            System.out.println("2. –î–æ–¥–∞—Ç–∏ —á–∏—Å–ª–æ");
            System.out.println("3. –î–æ–¥–∞—Ç–∏ —Ü—ñ–Ω—É");
            System.out.println("4. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ HashSet-–∏");
            System.out.println("5. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç–∞");
            System.out.println("6. –í–∏–¥–∞–ª–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç");
            System.out.println("0. –í–∏–π—Ç–∏");
            System.out.print("–í–∞—à –≤–∏–±—ñ—Ä: ");

            try {
                int choice = scanner.nextInt();
                scanner.nextLine(); // —Å–ø–æ–∂–∏–≤–∞—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫

                switch (choice) {
                    case 1:
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–ª—å–æ—Ä—É: ");
                        String color = scanner.nextLine();
                        addElementToHashSet(colors, color, "HashSet –∫–æ–ª—å–æ—Ä—ñ–≤");
                        break;

                    case 2:
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ: ");
                        int number = scanner.nextInt();
                        addElementToHashSet(numbers, number, "HashSet —á–∏—Å–µ–ª");
                        break;

                    case 3:
                        System.out.print("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É: ");
                        double price = scanner.nextDouble();
                        addElementToHashSet(prices, price, "HashSet —Ü—ñ–Ω");
                        break;

                    case 4:
                        System.out.println("\nüìã –í—Å—ñ HashSet-–∏:");
                        displayHashSetInfo(colors, "–ö–æ–ª—å–æ—Ä–∏");
                        displayHashSetInfo(numbers, "–ß–∏—Å–ª–∞");
                        displayHashSetInfo(prices, "–¶—ñ–Ω–∏");
                        break;

                    case 5:
                        System.out.println("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤ —è–∫–æ–º—É HashSet?");
                        System.out.println("1 - –ö–æ–ª—å–æ—Ä–∏, 2 - –ß–∏—Å–ª–∞, 3 - –¶—ñ–Ω–∏");
                        int setChoice = scanner.nextInt();
                        scanner.nextLine();

                        if (setChoice == 1) {
                            System.out.print("–í–≤–µ–¥—ñ—Ç—å –∫–æ–ª—ñ—Ä: ");
                            String checkColor = scanner.nextLine();
                            boolean exists = colors.contains(checkColor);
                            System.out.printf("–ö–æ–ª—ñ—Ä \"%s\": %s\n", checkColor,
                                exists ? "‚úÖ –Ü—Å–Ω—É—î" : "‚ùå –ù–µ —ñ—Å–Ω—É—î");
                        } else if (setChoice == 2) {
                            System.out.print("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ: ");
                            int checkNumber = scanner.nextInt();
                            boolean exists = numbers.contains(checkNumber);
                            System.out.printf("–ß–∏—Å–ª–æ %d: %s\n", checkNumber,
                                exists ? "‚úÖ –Ü—Å–Ω—É—î" : "‚ùå –ù–µ —ñ—Å–Ω—É—î");
                        } else if (setChoice == 3) {
                            System.out.print("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É: ");
                            double checkPrice = scanner.nextDouble();
                            boolean exists = prices.contains(checkPrice);
                            System.out.printf("–¶—ñ–Ω–∞ %.2f: %s\n", checkPrice,
                                exists ? "‚úÖ –Ü—Å–Ω—É—î" : "‚ùå –ù–µ —ñ—Å–Ω—É—î");
                        }
                        break;

                    case 6:
                        System.out.println("–í–∏–¥–∞–ª–∏—Ç–∏ –∑ —è–∫–æ–≥–æ HashSet?");
                        System.out.println("1 - –ö–æ–ª—å–æ—Ä–∏, 2 - –ß–∏—Å–ª–∞, 3 - –¶—ñ–Ω–∏");
                        int removeChoice = scanner.nextInt();
                        scanner.nextLine();

                        if (removeChoice == 1) {
                            System.out.print("–í–≤–µ–¥—ñ—Ç—å –∫–æ–ª—ñ—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ");
                            String removeColor = scanner.nextLine();
                            boolean removed = colors.remove(removeColor);
                            System.out.printf("–ö–æ–ª—ñ—Ä \"%s\": %s\n", removeColor,
                                removed ? "‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ" : "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                        } else if (removeChoice == 2) {
                            System.out.print("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ");
                            int removeNumber = scanner.nextInt();
                            boolean removed = numbers.remove(removeNumber);
                            System.out.printf("–ß–∏—Å–ª–æ %d: %s\n", removeNumber,
                                removed ? "‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ" : "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                        } else if (removeChoice == 3) {
                            System.out.print("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ");
                            double removePrice = scanner.nextDouble();
                            boolean removed = prices.remove(removePrice);
                            System.out.printf("–¶—ñ–Ω–∞ %.2f: %s\n", removePrice,
                                removed ? "‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ" : "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                        }
                        break;

                    case 0:
                        return;

                    default:
                        System.out.println("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!");
                }
            } catch (Exception e) {
                System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è!");
                scanner.nextLine(); // –æ—á–∏—â–∞—î–º–æ –±—É—Ñ–µ—Ä
            }
        }
    }

    public static void main(String[] args) {
        System.out.println("=== –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ 3 - –ó–∞–≤–¥–∞–Ω–Ω—è 2 ===");
        System.out.println("HashSet: –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–∑–Ω–∞—á–µ–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞");
        System.out.println("–°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–∏ –¢–í-43, –ø—Ä—ñ–∑–≤–∏—â–µ Step, –≤–∞—Ä—ñ–∞–Ω—Ç 16\n");

        Lr3_2 program = new Lr3_2();

// Demonstration of main functionality
        program.demonstrateColors();
        program.demonstrateNumbers();
        program.demonstratePrices();
        program.demonstrateHashSetOperations();
        program.demonstrateSetOperations();

// Interactive mode
        program.interactiveMode();

        System.out.println("\n‚úÖ –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!");
    }
}