#include <iostream>
#include <new>
using namespace std;

/*
 У чому, на вашу думку, при невдалій спробі виділення пам'яті
перевага виклику виняткової ситуації оператором new у порівнянні з поверненням нуля?

Відповідь:
1. Безпека коду: Виняткові ситуації не можна ігнорувати, на відміну від повернених значень.
   Якщо new повертає nullptr, код може продовжувати виконання з непередбачуваними наслідками,
   якщо програміст забув перевірити значення вказівника.

2. Чіткість коду: Код стає чистішим, оскільки не потрібно після кожного виклику new
   перевіряти, чи повернув він нульовий вказівник. Виняткові ситуації можна обробляти
   в одному місці (в блоці catch), що робить код більш читабельним.

3. Інформативність: Виняткова ситуація bad_alloc може містити додаткову інформацію
   про помилку, а не просто факт невдалого виділення пам'яті.

4. Уникнення помилок: Забуття перевірити повернене значення на nullptr - поширена помилка.
   З винятками такої проблеми немає, бо якщо виняток не обробляється, програма завершиться,
   що дозволяє швидко виявити проблему.

5. Ієрархія обробки помилок: Виняткові ситуації можуть "спливати" вгору по стеку викликів,
   дозволяючи обробити помилку на відповідному рівні, а не там, де вона виникла. Це особливо
   корисно, коли функція, яка викликає new, не може сама обробити помилку.
*/

// Приклад використання винятків при виділенні пам'яті
void demonstrateMemoryExceptions() {
    try {
        cout << "Спроба виділення дуже великого обсягу пам'яті...\n";
        
        int* hugeArray = new int[1000000000];
        
        cout << "Пам'ять виділена успішно.\n";
        delete[] hugeArray;
    }
    catch (const bad_alloc& e) {
        cout << "Виняток при виділенні пам'яті: " << e.what() << endl;
        cout << "Програма може коректно обробити цю ситуацію і продовжити роботу.\n";
    }
}

void demonstrateNullptrCheck() {
    cout << "\nСпроба виділення пам'яті старим стилем (без винятків)...\n";
    int* array = new(nothrow) int[1000000000];
    
    if (array == nullptr) {
        cout << "Не вдалося виділити пам'ять (отримано nullptr).\n";
        cout << "Потрібна явна перевірка результату і обробка помилки.\n";
    } else {
        cout << "Пам'ять виділена успішно.\n";
        delete[] array;
    }
}

int main() {
    cout << "Демонстрація переваг використання винятків при виділенні пам'яті\n\n";
    
    demonstrateMemoryExceptions();
    demonstrateNullptrCheck();
    
    cout << "\nПрограма успішно завершена.\n";
    return 0;
}