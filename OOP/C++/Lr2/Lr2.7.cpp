#include <cstdlib>
#include <iostream>
using namespace std;

/*
Пояснення, чому цей код працює:

1. Вираз "argv[argc-1]" отримує останній аргумент командного рядка.
   - argc - кількість аргументів
   - argv - масив вказівників на рядки аргументів
   - argc-1 - індекс останнього аргументу

2. Вираз "argc[argv-1]" виглядає дивно, але працює через синтаксичну
   особливість C++: a[b] еквівалентно *(a + b)
   
   argc[argv-1] можна переписати як *(argc + (argv-1))
   
   Оскільки argv - це вказівник на масив рядків, а argc - це ціле число,
   argv-1 означає адресу пам'яті перед argv. Коли ми "розіменовуємо" 
   (argc + (argv-1)), ми отримуємо значення за цією адресою, що є 
   першим символом імені програми.
   
   Це небезпечний трюк, який працює тільки через особливості роботи 
   компілятора і розміщення даних у пам'яті. Не варто використовувати
   такий код на практиці!
*/

int main(int argc, char **argv) {
    // Виводимо останній аргумент командного рядка
    cout << "argv[argc-1]: " << argv[argc-1] << endl;
    
    // Використовуємо трюк з синтаксисом: a[b] = *(a + b) = *(b + a) = b[a]
    cout << "argc[argv-1]: " << argc[argv-1] << endl;
    
    return EXIT_SUCCESS;
}

/*
Щоб протестувати цей код, скомпілюйте його і запустіть з аргументами:
./program arg1 arg2 arg3

Результат буде приблизно такий:
argv[argc-1]: arg3
argc[argv-1]: (якийсь символ, залежить від розміщення пам'яті)
*/