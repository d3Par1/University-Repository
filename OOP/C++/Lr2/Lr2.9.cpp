#include <iostream>
#include <cstdlib>
#include <string>

using namespace std;

/*
Пояснення, чому не можна перевантажити функції atof, atoi та atol:

Функції atof, atoi та atol не можна перевантажити, оскільки вони відрізняються лише
типом повертаємого значення, але мають однакові типи параметрів. 

У C++ перевантаження функцій дозволяє визначити кілька функцій з однаковим ім'ям,
але різними параметрами (кількістю, типами або послідовністю параметрів).

Проте, перевантаження функцій НЕ може базуватися лише на різних типах повертаємого 
значення. Якщо спробувати перевантажити функції, які відрізняються лише типом 
повертаємого значення, компілятор не зможе визначити, яку саме функцію викликати,
оскільки виклики виглядають однаково в коді.

Це продемонстровано нижче спробою створити свої власні перевантажені версії цих функцій.
*/

// Спроба перевантаження за типом повертаємого значення
// Ці функції мають однакові параметри, але різні типи повертаємого значення
double my_atof(const char* str) {
    return std::atof(str);
}

int my_atoi(const char* str) {
    return std::atoi(str);
}

long my_atol(const char* str) {
    return std::atol(str);
}
// Компілятор не знатиме, яку з цих функцій викликати:
/*
double func(const char* str) { return 0.0; }
int func(const char* str) { return 0; }
long func(const char* str) { return 0L; }
*/

int main() {
    const char* numStr = "123.45";
    
    // Ці функції працюють, бо мають різні імена
    cout << "atof(\"" << numStr << "\") = " << atof(numStr) << endl;
    cout << "atoi(\"" << numStr << "\") = " << atoi(numStr) << endl;
    cout << "atol(\"" << numStr << "\") = " << atol(numStr) << endl;
    
    cout << "\nЦі функції можуть бути викликані, тому що вони мають різні імена:" << endl;
    cout << "my_atof(\"" << numStr << "\") = " << my_atof(numStr) << endl;
    cout << "my_atoi(\"" << numStr << "\") = " << my_atoi(numStr) << endl;
    cout << "my_atol(\"" << numStr << "\") = " << my_atol(numStr) << endl;
    
    /*
    // Це викликало б помилку компіляції, якби ми спробували перевантажити однакову функцію
    // func(numStr); // Помилка: неоднозначний виклик функції
    */
    
    return 0;
}