#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <time.h>

/*
–ó–ê–í–î–ê–ù–ù–Ø 17: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π —Ä–æ–±–æ—Ç–∏ –∑ –±—ñ–Ω–∞—Ä–Ω–∏–º–∏ –¥–µ—Ä–µ–≤–∞–º–∏

–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–π –∑ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤
"Binary search tree" —Ç–∞ "Tree-traverser":
- –í—Å—Ç–∞–≤–∫–∞, –ø–æ—à—É–∫, –≤–∏–¥–∞–ª–µ–Ω–Ω—è
- –†—ñ–∑–Ω—ñ –≤–∏–¥–∏ –æ–±—Ö–æ–¥—É –¥–µ—Ä–µ–≤–∞
- –ö—Ä–∞–π–Ω—ñ –≤–∏–ø–∞–¥–∫–∏ —Ç–∞ —Å—Ç—Ä–µ—Å-—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
*/

// ============= –°–¢–†–£–ö–¢–£–†–ê –î–ï–†–ï–í–ê =============

typedef struct Treenode Treenode;

struct Treenode {
    char *word;
    int count;
    Treenode *left;
    Treenode *right;
};

// ============= –û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á –î–ï–†–ï–í–ê =============

Treenode* newtree(char *word, int count) {
    Treenode *newp = (Treenode *) malloc(sizeof(Treenode));
    if (newp == NULL) return NULL;

    newp->word = (char *) malloc(strlen(word) + 1);
    if (newp->word == NULL) {
        free(newp);
        return NULL;
    }

    strcpy(newp->word, word);
    newp->count = count;
    newp->left = newp->right = NULL;
    return newp;
}

Treenode* insert(Treenode *treep, char *word, int count) {
    int cmp;

    if (treep == NULL) {
        return newtree(word, count);
    }

    cmp = strcmp(word, treep->word);
    if (cmp == 0) {
        treep->count += count;
    } else if (cmp < 0) {
        treep->left = insert(treep->left, word, count);
    } else {
        treep->right = insert(treep->right, word, count);
    }

    return treep;
}

Treenode* lookup(Treenode *treep, char *word) {
    int cmp;

    if (treep == NULL)
        return NULL;

    cmp = strcmp(word, treep->word);
    if (cmp == 0)
        return treep;
    else if (cmp < 0)
        return lookup(treep->left, word);
    else
        return lookup(treep->right, word);
}

// –§—É–Ω–∫—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—É–∑–ª–∞
Treenode* find_min(Treenode *treep) {
    while (treep && treep->left) {
        treep = treep->left;
    }
    return treep;
}

Treenode* delete_node(Treenode *treep, char *word) {
    if (treep == NULL) return NULL;

    int cmp = strcmp(word, treep->word);

    if (cmp < 0) {
        treep->left = delete_node(treep->left, word);
    } else if (cmp > 0) {
        treep->right = delete_node(treep->right, word);
    } else {
        // –ó–Ω–∞–π—à–ª–∏ –≤—É–∑–æ–ª –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        if (treep->left == NULL) {
            Treenode *temp = treep->right;
            free(treep->word);
            free(treep);
            return temp;
        } else if (treep->right == NULL) {
            Treenode *temp = treep->left;
            free(treep->word);
            free(treep);
            return temp;
        }

        // –í—É–∑–æ–ª –∑ –¥–≤–æ–º–∞ –¥—ñ—Ç—å–º–∏
        Treenode *temp = find_min(treep->right);

        // –ö–æ–ø—ñ—é—î–º–æ –¥–∞–Ω—ñ
        free(treep->word);
        treep->word = (char *) malloc(strlen(temp->word) + 1);
        strcpy(treep->word, temp->word);
        treep->count = temp->count;

        // –í–∏–¥–∞–ª—è—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–∫–∞
        treep->right = delete_node(treep->right, temp->word);
    }

    return treep;
}

void freetree(Treenode *treep) {
    if (treep == NULL) return;
    freetree(treep->left);
    freetree(treep->right);
    free(treep->word);
    free(treep);
}

// ============= –§–£–ù–ö–¶–Ü–á –û–ë–•–û–î–£ =============

// –°–∏–º–µ—Ç—Ä–∏—á–Ω–∏–π –æ–±—Ö—ñ–¥ (in-order)
void inorder_traverse(Treenode *treep, char **result, int *index) {
    if (treep == NULL) return;

    inorder_traverse(treep->left, result, index);
    result[*index] = treep->word;
    (*index)++;
    inorder_traverse(treep->right, result, index);
}

// –ü—Ä—è–º–∏–π –æ–±—Ö—ñ–¥ (pre-order)
void preorder_traverse(Treenode *treep, char **result, int *index) {
    if (treep == NULL) return;

    result[*index] = treep->word;
    (*index)++;
    preorder_traverse(treep->left, result, index);
    preorder_traverse(treep->right, result, index);
}

// –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –æ–±—Ö—ñ–¥ (post-order)
void postorder_traverse(Treenode *treep, char **result, int *index) {
    if (treep == NULL) return;

    postorder_traverse(treep->left, result, index);
    postorder_traverse(treep->right, result, index);
    result[*index] = treep->word;
    (*index)++;
}

// ============= –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –¢–ï–°–¢–£–í–ê–ù–ù–Ø =============

int tree_size(Treenode *treep) {
    if (treep == NULL) return 0;
    return 1 + tree_size(treep->left) + tree_size(treep->right);
}

int tree_height(Treenode *treep) {
    if (treep == NULL) return 0;

    int left_height = tree_height(treep->left);
    int right_height = tree_height(treep->right);

    return 1 + (left_height > right_height ? left_height : right_height);
}

int is_valid_bst(Treenode *treep, char *min_val, char *max_val) {
    if (treep == NULL) return 1;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –≤—É–∑–æ–ª
    if ((min_val && strcmp(treep->word, min_val) <= 0) ||
        (max_val && strcmp(treep->word, max_val) >= 0)) {
        return 0;
    }

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–¥–µ—Ä–µ–≤–∞
    return is_valid_bst(treep->left, min_val, treep->word) &&
           is_valid_bst(treep->right, treep->word, max_val);
}

// ============= –¢–ï–°–¢–£–í–ê–õ–¨–ù–ê –°–ò–°–¢–ï–ú–ê =============

typedef struct {
    int total_tests;
    int passed_tests;
    int failed_tests;
    char current_test[256];
} TestSuite;

TestSuite test_suite = {0, 0, 0, ""};

void test_start(const char *test_name) {
    strcpy(test_suite.current_test, test_name);
    test_suite.total_tests++;
    printf("–¢–µ—Å—Ç: %s ... ", test_name);
}

void test_assert(int condition, const char *message) {
    if (condition) {
        printf("–ü–†–û–ô–î–ï–ù–û\n");
        test_suite.passed_tests++;
    } else {
        printf("–ü–†–û–í–ê–õ–ï–ù–û - %s\n", message);
        test_suite.failed_tests++;
    }
}

void test_summary() {
    printf("\n=== –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø ===\n");
    printf("–ó–∞–≥–∞–ª–æ–º —Ç–µ—Å—Ç—ñ–≤: %d\n", test_suite.total_tests);
    printf("–ü—Ä–æ–π—à–ª–æ: %d\n", test_suite.passed_tests);
    printf("–ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—è: %d\n", test_suite.failed_tests);
    printf("–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: %.1f%%\n",
           (double)test_suite.passed_tests / test_suite.total_tests * 100);

    if (test_suite.failed_tests == 0) {
        printf("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!\n");
    } else {
        printf("‚ùå –Ñ –ø—Ä–æ–±–ª–µ–º–∏, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è\n");
    }
}

// ============= –¢–ï–°–¢–ò –û–°–ù–û–í–ù–ò–• –§–£–ù–ö–¶–Ü–ô =============

void test_tree_creation() {
    test_start("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞");

    Treenode *node = newtree("test", 5);
    int result = (node != NULL &&
                  strcmp(node->word, "test") == 0 &&
                  node->count == 5 &&
                  node->left == NULL &&
                  node->right == NULL);

    test_assert(result, "–í—É–∑–æ–ª —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ");

    if (node) {
        free(node->word);
        free(node);
    }
}

void test_insertion_and_lookup() {
    test_start("–í—Å—Ç–∞–≤–∫–∞ —Ç–∞ –ø–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤");

    Treenode *tree = NULL;

    // –í—Å—Ç–∞–≤–ª—è—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏
    tree = insert(tree, "dog", 1);
    tree = insert(tree, "cat", 1);
    tree = insert(tree, "elephant", 1);
    tree = insert(tree, "bird", 1);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—à—É–∫
    Treenode *found_dog = lookup(tree, "dog");
    Treenode *found_cat = lookup(tree, "cat");
    Treenode *found_missing = lookup(tree, "zebra");

    int result = (found_dog != NULL && strcmp(found_dog->word, "dog") == 0 &&
                  found_cat != NULL && strcmp(found_cat->word, "cat") == 0 &&
                  found_missing == NULL);

    test_assert(result, "–í—Å—Ç–∞–≤–∫–∞ –∞–±–æ –ø–æ—à—É–∫ –ø—Ä–∞—Ü—é—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ");

    freetree(tree);
}

void test_duplicate_insertion() {
    test_start("–í—Å—Ç–∞–≤–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤");

    Treenode *tree = NULL;
    tree = insert(tree, "word", 1);
    tree = insert(tree, "word", 3);
    tree = insert(tree, "word", 2);

    Treenode *found = lookup(tree, "word");
    int result = (found != NULL && found->count == 6); // 1+3+2

    test_assert(result, "–î—É–±–ª—ñ–∫–∞—Ç–∏ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ");

    freetree(tree);
}

void test_tree_structure() {
    test_start("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ BST");

    Treenode *tree = NULL;
    char *words[] = {"dog", "cat", "elephant", "bird", "fish"};
    int word_count = sizeof(words) / sizeof(words[0]);

    for (int i = 0; i < word_count; i++) {
        tree = insert(tree, words[i], 1);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–µ—Ä–µ–≤–æ —î –≤–∞–ª—ñ–¥–Ω–∏–º BST
    int is_valid = is_valid_bst(tree, NULL, NULL);
    int size = tree_size(tree);

    int result = (is_valid && size == word_count);

    test_assert(result, "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ BST –ø–æ—Ä—É—à–µ–Ω–∞");

    freetree(tree);
}

void test_deletion() {
    test_start("–í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—É–∑–ª—ñ–≤");

    Treenode *tree = NULL;
    char *words[] = {"dog", "cat", "elephant", "bird", "fish", "ant", "zebra"};
    int word_count = sizeof(words) / sizeof(words[0]);

    // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ä–µ–≤–æ
    for (int i = 0; i < word_count; i++) {
        tree = insert(tree, words[i], 1);
    }

    int original_size = tree_size(tree);

    // –í–∏–¥–∞–ª—è—î–º–æ –ª–∏—Å—Ç–æ–∫
    tree = delete_node(tree, "ant");

    // –í–∏–¥–∞–ª—è—î–º–æ –≤—É–∑–æ–ª –∑ –æ–¥–Ω–∏–º –¥–∏—Ç—è–º
    tree = delete_node(tree, "zebra");

    // –í–∏–¥–∞–ª—è—î–º–æ –≤—É–∑–æ–ª –∑ –¥–≤–æ–º–∞ –¥—ñ—Ç—å–º–∏
    tree = delete_node(tree, "dog");

    int new_size = tree_size(tree);
    int still_valid = is_valid_bst(tree, NULL, NULL);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤–∏–¥–∞–ª–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ
    int ant_absent = (lookup(tree, "ant") == NULL);
    int zebra_absent = (lookup(tree, "zebra") == NULL);
    int dog_absent = (lookup(tree, "dog") == NULL);

    int result = (new_size == original_size - 3 &&
                  still_valid &&
                  ant_absent && zebra_absent && dog_absent);

    test_assert(result, "–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ");

    freetree(tree);
}

// ============= –¢–ï–°–¢–ò –û–ë–•–û–î–£ =============

void test_inorder_traversal() {
    test_start("–°–∏–º–µ—Ç—Ä–∏—á–Ω–∏–π –æ–±—Ö—ñ–¥ (in-order)");

    Treenode *tree = NULL;
    char *words[] = {"dog", "cat", "elephant", "bird"};
    int word_count = sizeof(words) / sizeof(words[0]);

    for (int i = 0; i < word_count; i++) {
        tree = insert(tree, words[i], 1);
    }

    char *result[10];
    int index = 0;
    inorder_traverse(tree, result, &index);

    // In-order –æ–±—Ö—ñ–¥ BST –ø–æ–≤–∏–Ω–µ–Ω –¥–∞—Ç–∏ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫
    int is_sorted = 1;
    for (int i = 1; i < index; i++) {
        if (strcmp(result[i-1], result[i]) >= 0) {
            is_sorted = 0;
            break;
        }
    }

    test_assert(is_sorted && index == word_count,
                "In-order –æ–±—Ö—ñ–¥ –Ω–µ –¥–∞—î –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫—É");

    freetree(tree);
}

void test_preorder_traversal() {
    test_start("–ü—Ä—è–º–∏–π –æ–±—Ö—ñ–¥ (pre-order)");

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ—Ä—è–¥–∫—É
    Treenode *tree = newtree("B", 1);
    tree->left = newtree("A", 1);
    tree->right = newtree("C", 1);

    char *result[10];
    int index = 0;
    preorder_traverse(tree, result, &index);

    // Pre-order: –∫–æ—Ä—ñ–Ω—å, –ª—ñ–≤–µ, –ø—Ä–∞–≤–µ -> B, A, C
    int correct_order = (index == 3 &&
                        strcmp(result[0], "B") == 0 &&
                        strcmp(result[1], "A") == 0 &&
                        strcmp(result[2], "C") == 0);

    test_assert(correct_order, "Pre-order –æ–±—Ö—ñ–¥ –ø—Ä–∞—Ü—é—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ");

    freetree(tree);
}

void test_postorder_traversal() {
    test_start("–ó–≤–æ—Ä–æ—Ç–Ω–∏–π –æ–±—Ö—ñ–¥ (post-order)");

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ—Ä—è–¥–∫—É
    Treenode *tree = newtree("B", 1);
    tree->left = newtree("A", 1);
    tree->right = newtree("C", 1);

    char *result[10];
    int index = 0;
    postorder_traverse(tree, result, &index);

    // Post-order: –ª—ñ–≤–µ, –ø—Ä–∞–≤–µ, –∫–æ—Ä—ñ–Ω—å -> A, C, B
    int correct_order = (index == 3 &&
                        strcmp(result[0], "A") == 0 &&
                        strcmp(result[1], "C") == 0 &&
                        strcmp(result[2], "B") == 0);

    test_assert(correct_order, "Post-order –æ–±—Ö—ñ–¥ –ø—Ä–∞—Ü—é—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ");

    freetree(tree);
}

// ============= –¢–ï–°–¢–ò –ö–†–ê–ô–ù–Ü–• –í–ò–ü–ê–î–ö–Ü–í =============

void test_empty_tree() {
    test_start("–û–ø–µ—Ä–∞—Ü—ñ—ó –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º –¥–µ—Ä–µ–≤–æ–º");

    Treenode *empty_tree = NULL;

    // –ü–æ—à—É–∫ –≤ –ø–æ—Ä–æ–∂–Ω—å–æ–º—É –¥–µ—Ä–µ–≤—ñ
    Treenode *found = lookup(empty_tree, "anything");

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ –¥–µ—Ä–µ–≤–∞
    empty_tree = delete_node(empty_tree, "anything");

    // –†–æ–∑–º—ñ—Ä –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ –¥–µ—Ä–µ–≤–∞
    int size = tree_size(empty_tree);
    int height = tree_height(empty_tree);

    int result = (found == NULL && empty_tree == NULL &&
                  size == 0 && height == 0);

    test_assert(result, "–û–ø–µ—Ä–∞—Ü—ñ—ó –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º –¥–µ—Ä–µ–≤–æ–º –ø—Ä–∞—Ü—é—é—Ç—å –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ");
}

void test_single_node() {
    test_start("–î–µ—Ä–µ–≤–æ –∑ –æ–¥–Ω–∏–º –≤—É–∑–ª–æ–º");

    Treenode *tree = newtree("single", 1);

    // –ü–æ—à—É–∫
    Treenode *found = lookup(tree, "single");
    Treenode *not_found = lookup(tree, "other");

    // –†–æ–∑–º—ñ—Ä —Ç–∞ –≤–∏—Å–æ—Ç–∞
    int size = tree_size(tree);
    int height = tree_height(tree);

    // –í–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å BST
    int is_valid = is_valid_bst(tree, NULL, NULL);

    int result = (found == tree && not_found == NULL &&
                  size == 1 && height == 1 && is_valid);

    test_assert(result, "–î–µ—Ä–µ–≤–æ –∑ –æ–¥–Ω–∏–º –≤—É–∑–ª–æ–º –ø—Ä–∞—Ü—é—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ");

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è —î–¥–∏–Ω–æ–≥–æ –≤—É–∑–ª–∞
    tree = delete_node(tree, "single");
    int empty_after_delete = (tree == NULL);

    test_start("–í–∏–¥–∞–ª–µ–Ω–Ω—è —î–¥–∏–Ω–æ–≥–æ –≤—É–∑–ª–∞");
    test_assert(empty_after_delete, "–í–∏–¥–∞–ª–µ–Ω–Ω—è —î–¥–∏–Ω–æ–≥–æ –≤—É–∑–ª–∞ –∑–∞–ª–∏—à–∞—î –¥–µ—Ä–µ–≤–æ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–º");
}

void test_linear_tree() {
    test_start("–õ—ñ–Ω—ñ–π–Ω–µ –¥–µ—Ä–µ–≤–æ (–Ω–∞–π–≥—ñ—Ä—à–∏–π –≤–∏–ø–∞–¥–æ–∫)");

    Treenode *tree = NULL;

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ª—ñ–Ω—ñ–π–Ω–µ –¥–µ—Ä–µ–≤–æ (—Ç—ñ–ª—å–∫–∏ –ø—Ä–∞–≤—ñ –¥—ñ—Ç–∏)
    for (int i = 1; i <= 5; i++) {
        char word[10];
        sprintf(word, "word%d", i);
        tree = insert(tree, word, 1);
    }

    int size = tree_size(tree);
    int height = tree_height(tree);
    int is_valid = is_valid_bst(tree, NULL, NULL);

    // –õ—ñ–Ω—ñ–π–Ω–µ –¥–µ—Ä–µ–≤–æ –º–∞—î –≤–∏—Å–æ—Ç—É —Ä—ñ–≤–Ω—É —Ä–æ–∑–º—ñ—Ä—É
    int result = (size == 5 && height == 5 && is_valid);

    test_assert(result, "–õ—ñ–Ω—ñ–π–Ω–µ –¥–µ—Ä–µ–≤–æ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ");

    freetree(tree);
}

// ============= –°–¢–†–ï–°-–¢–ï–°–¢–£–í–ê–ù–ù–Ø =============

void stress_test_insertion() {
    test_start("–°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ (1000 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)");

    Treenode *tree = NULL;
    const int COUNT = 1000;

    // –í—Å—Ç–∞–≤–ª—è—î–º–æ –±–∞–≥–∞—Ç–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    for (int i = 0; i < COUNT; i++) {
        char word[20];
        sprintf(word, "item%04d", rand() % (COUNT * 2));
        tree = insert(tree, word, 1);
    }

    int size = tree_size(tree);
    int is_valid = is_valid_bst(tree, NULL, NULL);

    int result = (size > 0 && size <= COUNT && is_valid);

    test_assert(result, "–°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è");

    freetree(tree);
}

void stress_test_mixed_operations() {
    test_start("–°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç –∑–º—ñ—à–∞–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π");

    Treenode *tree = NULL;
    const int OPERATIONS = 500;
    int operations_passed = 0;

    for (int i = 0; i < OPERATIONS; i++) {
        char word[20];
        sprintf(word, "item%03d", rand() % 100);

        int operation = rand() % 3;

        switch (operation) {
            case 0: // –í—Å—Ç–∞–≤–∫–∞
                tree = insert(tree, word, 1);
                operations_passed++;
                break;

            case 1: // –ü–æ—à—É–∫
                lookup(tree, word);
                operations_passed++;
                break;

            case 2: // –í–∏–¥–∞–ª–µ–Ω–Ω—è
                tree = delete_node(tree, word);
                operations_passed++;
                break;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó
        if (!is_valid_bst(tree, NULL, NULL)) {
            break;
        }
    }

    int result = (operations_passed == OPERATIONS &&
                  is_valid_bst(tree, NULL, NULL));

    test_assert(result, "–°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç –∑–º—ñ—à–∞–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è");

    freetree(tree);
}

// ============= –¢–ï–°–¢ –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü =============

void performance_test() {
    printf("\n=== –¢–ï–°–¢–ò –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü ===\n");

    const int SIZES[] = {100, 500, 1000, 2000};
    const int SIZE_COUNT = sizeof(SIZES) / sizeof(SIZES[0]);

    printf("%-8s %-12s %-12s %-12s %-10s\n",
           "–†–æ–∑–º—ñ—Ä", "–í—Å—Ç–∞–≤–∫–∞(—Å)", "–ü–æ—à—É–∫(—Å)", "–í–∏—Å–æ—Ç–∞", "–í–∞–ª—ñ–¥–Ω–∏–π");
    printf("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n");

    for (int s = 0; s < SIZE_COUNT; s++) {
        int size = SIZES[s];
        Treenode *tree = NULL;

        // –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏
        clock_t start = clock();
        for (int i = 0; i < size; i++) {
            char word[20];
            sprintf(word, "item%05d", rand() % (size * 2));
            tree = insert(tree, word, 1);
        }
        clock_t end = clock();
        double insert_time = ((double)(end - start)) / CLOCKS_PER_SEC;

        // –¢–µ—Å—Ç –ø–æ—à—É–∫—É
        start = clock();
        for (int i = 0; i < size / 10; i++) {
            char word[20];
            sprintf(word, "item%05d", rand() % (size * 2));
            lookup(tree, word);
        }
        end = clock();
        double search_time = ((double)(end - start)) / CLOCKS_PER_SEC;

        int height = tree_height(tree);
        int is_valid = is_valid_bst(tree, NULL, NULL);

        printf("%-8d %-12.6f %-12.6f %-12d %-10s\n",
               size, insert_time, search_time, height,
               is_valid ? "–¢–∞–∫" : "–ù—ñ");

        freetree(tree);
    }
}

// ============= –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –¢–ï–°–¢–£–í–ê–ù–ù–Ø =============

void run_all_tests() {
    printf("=== –ó–ê–ü–£–°–ö –ü–û–í–ù–û–ì–û –ù–ê–ë–û–†–£ –¢–ï–°–¢–Ü–í ===\n\n");

    // –¢–µ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    printf("=== –¢–ï–°–¢–ò –û–°–ù–û–í–ù–ò–• –§–£–ù–ö–¶–Ü–ô ===\n");
    test_tree_creation();
    test_insertion_and_lookup();
    test_duplicate_insertion();
    test_tree_structure();
    test_deletion();

    // –¢–µ—Å—Ç–∏ –æ–±—Ö–æ–¥—É
    printf("\n=== –¢–ï–°–¢–ò –û–ë–•–û–î–£ –î–ï–†–ï–í–ê ===\n");
    test_inorder_traversal();
    test_preorder_traversal();
    test_postorder_traversal();

    // –¢–µ—Å—Ç–∏ –∫—Ä–∞–π–Ω—ñ—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
    printf("\n=== –¢–ï–°–¢–ò –ö–†–ê–ô–ù–Ü–• –í–ò–ü–ê–î–ö–Ü–í ===\n");
    test_empty_tree();
    test_single_node();
    test_linear_tree();

    // –°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    printf("\n=== –°–¢–†–ï–°-–¢–ï–°–¢–£–í–ê–ù–ù–Ø ===\n");
    stress_test_insertion();
    stress_test_mixed_operations();

    // –ü—ñ–¥—Å—É–º–æ–∫
    test_summary();

    // –¢–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    performance_test();
}

int main(void) {
    printf("=== –ó–∞–≤–¥–∞–Ω–Ω—è 17: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π —Ä–æ–±–æ—Ç–∏ –∑ –¥–µ—Ä–µ–≤–∞–º–∏ ===\n\n");

    srand(time(NULL));

    run_all_tests();

    printf("\n=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á –ü–û –¢–ï–°–¢–£–í–ê–ù–ù–Æ –î–ï–†–ï–í ===\n");
    printf("1. –û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á:\n");
    printf("   ‚Ä¢ –¢–µ—Å—Ç—É–π—Ç–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, –≤—Å—Ç–∞–≤–∫—É, –ø–æ—à—É–∫, –≤–∏–¥–∞–ª–µ–Ω–Ω—è\n");
    printf("   ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ –æ–±—Ä–æ–±–∫—É –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤\n");
    printf("   ‚Ä¢ –í–∞–ª—ñ–¥—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É BST –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó\n\n");

    printf("2. –û–ë–•–û–î–ò –î–ï–†–ï–í–ê:\n");
    printf("   ‚Ä¢ In-order –ø–æ–≤–∏–Ω–µ–Ω –¥–∞–≤–∞—Ç–∏ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫\n");
    printf("   ‚Ä¢ Pre-order —Ç–∞ post-order –º–∞—é—Ç—å —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø–æ—Ä—è–¥–∫–∏\n");
    printf("   ‚Ä¢ –¢–µ—Å—Ç—É–π—Ç–µ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ö –¥–µ—Ä–µ–≤\n\n");

    printf("3. –ö–†–ê–ô–ù–Ü –í–ò–ü–ê–î–ö–ò:\n");
    printf("   ‚Ä¢ –ü–æ—Ä–æ–∂–Ω—î –¥–µ—Ä–µ–≤–æ\n");
    printf("   ‚Ä¢ –î–µ—Ä–µ–≤–æ –∑ –æ–¥–Ω–∏–º –≤—É–∑–ª–æ–º\n");
    printf("   ‚Ä¢ –õ—ñ–Ω—ñ–π–Ω–µ –¥–µ—Ä–µ–≤–æ (–Ω–∞–π–≥—ñ—Ä—à–∏–π –≤–∏–ø–∞–¥–æ–∫)\n");
    printf("   ‚Ä¢ –ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–µ –¥–µ—Ä–µ–≤–æ (–Ω–∞–π–∫—Ä–∞—â–∏–π –≤–∏–ø–∞–¥–æ–∫)\n\n");

    printf("4. –°–¢–†–ï–°-–¢–ï–°–¢–£–í–ê–ù–ù–Ø:\n");
    printf("   ‚Ä¢ –í–µ–ª–∏–∫—ñ –æ–±—Å—è–≥–∏ –¥–∞–Ω–∏—Ö\n");
    printf("   ‚Ä¢ –ó–º—ñ—à–∞–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó\n");
    printf("   ‚Ä¢ –í–∏–ø–∞–¥–∫–æ–≤—ñ —Ç–∞ –ø–∞—Ç–æ–ª–æ–≥—ñ—á–Ω—ñ –¥–∞–Ω—ñ\n\n");

    printf("5. –ü–†–û–î–£–ö–¢–ò–í–ù–Ü–°–¢–¨:\n");
    printf("   ‚Ä¢ –í–∏–º—ñ—Ä—é–π—Ç–µ —á–∞—Å –æ–ø–µ—Ä–∞—Ü—ñ–π\n");
    printf("   ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ –≤–∏—Å–æ—Ç—É –¥–µ—Ä–µ–≤–∞\n");
    printf("   ‚Ä¢ –ú–æ–Ω—ñ—Ç–æ—Ä—å—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ\n\n");

    printf("6. –Ü–ù–°–¢–†–£–ú–ï–ù–¢–ò:\n");
    printf("   ‚Ä¢ valgrind –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞–º'—è—Ç—ñ\n");
    printf("   ‚Ä¢ Unit testing frameworks\n");
    printf("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è —Ç–µ—Å—Ç—ñ–≤\n");
    printf("   ‚Ä¢ Continuous integration\n");

    return (test_suite.failed_tests == 0) ? 0 : 1;
}