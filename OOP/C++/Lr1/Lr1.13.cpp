#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <time.h>



typedef struct Nameval Nameval;

struct Nameval {
    char *name;
    int value;
    Nameval *next;
};


Nameval* newitem(char *name, int value) {
    Nameval *newp = (Nameval *) malloc(sizeof(Nameval));
    if (newp == NULL) return NULL;

    newp->name = (char *) malloc(strlen(name) + 1);
    if (newp->name == NULL) {
        free(newp);
        return NULL;
    }

    strcpy(newp->name, name);
    newp->value = value;
    newp->next = NULL;
    return newp;
}

Nameval* addfront(Nameval *listp, Nameval *newp) {
    newp->next = listp;
    return newp;
}

Nameval* lookup(Nameval *listp, char *name) {
    for (Nameval *p = listp; p != NULL; p = p->next) {
        if (strcmp(name, p->name) == 0)
            return p;
    }
    return NULL;
}

Nameval* delitem(Nameval *listp, char *name) {
    Nameval *p, *prev;

    prev = NULL;
    for (p = listp; p != NULL; p = p->next) {
        if (strcmp(name, p->name) == 0) {
            if (prev == NULL) {
                listp = p->next;
            } else {
                prev->next = p->next;
            }
            free(p->name);
            free(p);
            return listp;
        }
        prev = p;
    }
    return listp;
}

int list_length(Nameval *listp) {
    int count = 0;
    for (Nameval *p = listp; p != NULL; p = p->next) {
        count++;
    }
    return count;
}

void free_list(Nameval *listp) {
    Nameval *next;
    for (Nameval *p = listp; p != NULL; p = next) {
        next = p->next;
        free(p->name);
        free(p);
    }
}

Nameval* reverse_list(Nameval *listp) {
    Nameval *prev = NULL;
    Nameval *current = listp;
    Nameval *next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev;
}


typedef struct {
    int total_tests;
    int passed_tests;
    int failed_tests;
    char current_test[256];
} TestSuite;

TestSuite test_suite = {0, 0, 0, ""};

void test_start(const char *test_name) {
    strcpy(test_suite.current_test, test_name);
    test_suite.total_tests++;
    printf("–¢–µ—Å—Ç: %s ... ", test_name);
}

void test_assert(int condition, const char *message) {
    if (condition) {
        printf("–ü–†–û–ô–î–ï–ù–û\n");
        test_suite.passed_tests++;
    } else {
        printf("–ü–†–û–í–ê–õ–ï–ù–û - %s\n", message);
        test_suite.failed_tests++;
    }
}

void test_summary() {
    printf("\n=== –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø ===\n");
    printf("–ó–∞–≥–∞–ª–æ–º —Ç–µ—Å—Ç—ñ–≤: %d\n", test_suite.total_tests);
    printf("–ü—Ä–æ–π—à–ª–æ: %d\n", test_suite.passed_tests);
    printf("–ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—è: %d\n", test_suite.failed_tests);
    printf("–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: %.1f%%\n",
           (double)test_suite.passed_tests / test_suite.total_tests * 100);

    if (test_suite.failed_tests == 0) {
        printf("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!\n");
    } else {
        printf("‚ùå –Ñ –ø—Ä–æ–±–ª–µ–º–∏, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è\n");
    }
}


void test_newitem() {
    test_start("newitem - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞");

    Nameval *item = newitem("Test", 42);
    int result = (item != NULL &&
                  strcmp(item->name, "Test") == 0 &&
                  item->value == 42 &&
                  item->next == NULL);

    test_assert(result, "–ï–ª–µ–º–µ–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ");

    if (item) {
        free(item->name);
        free(item);
    }
}

void test_newitem_memory_failure() {
    test_start("newitem - –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –ø–∞–º'—è—Ç—ñ");

    // –°–∏–º—É–ª—é–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É –≤–∞–∂–∫–æ, —Ç–æ–º—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—ñ–ª—å–∫–∏ NULL –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç—É—Ç –±–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ mock –¥–ª—è malloc
    test_assert(1, "–¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ - –ø–æ—Ç—Ä–µ–±—É—î mock malloc");
}

void test_addfront() {
    test_start("addfront - –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–æ–∫");

    Nameval *list = NULL;
    Nameval *item1 = newitem("First", 1);
    Nameval *item2 = newitem("Second", 2);

    list = addfront(list, item1);
    list = addfront(list, item2);

    int result = (list == item2 &&
                  list->next == item1 &&
                  item1->next == NULL);

    test_assert(result, "–ü–æ—Ä—è–¥–æ–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π");

    free_list(list);
}

void test_lookup_found() {
    test_start("lookup - –ø–æ—à—É–∫ —ñ—Å–Ω—É—é—á–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞");

    Nameval *list = NULL;
    list = addfront(list, newitem("Charlie", 30));
    list = addfront(list, newitem("Bob", 20));
    list = addfront(list, newitem("Alice", 10));

    Nameval *found = lookup(list, "Bob");
    int result = (found != NULL &&
                  strcmp(found->name, "Bob") == 0 &&
                  found->value == 20);

    test_assert(result, "–ï–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –¥–∞–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ");

    free_list(list);
}

void test_lookup_not_found() {
    test_start("lookup - –ø–æ—à—É–∫ –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞");

    Nameval *list = NULL;
    list = addfront(list, newitem("Alice", 10));

    Nameval *found = lookup(list, "Unknown");
    test_assert(found == NULL, "–ü–æ–≤–µ—Ä–Ω—É—Ç–æ –Ω–µ NULL –¥–ª—è –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞");

    free_list(list);
}

void test_lookup_empty_list() {
    test_start("lookup - –ø–æ—à—É–∫ –≤ –ø–æ—Ä–æ–∂–Ω—å–æ–º—É —Å–ø–∏—Å–∫—É");

    Nameval *found = lookup(NULL, "Any");
    test_assert(found == NULL, "–ü–æ–≤–µ—Ä–Ω—É—Ç–æ –Ω–µ NULL –¥–ª—è –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ —Å–ø–∏—Å–∫—É");
}

void test_delitem_first() {
    test_start("delitem - –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞");

    Nameval *list = NULL;
    list = addfront(list, newitem("Third", 3));
    list = addfront(list, newitem("Second", 2));
    list = addfront(list, newitem("First", 1));

    list = delitem(list, "First");

    int result = (list != NULL &&
                  strcmp(list->name, "Second") == 0 &&
                  list_length(list) == 2);

    test_assert(result, "–ü–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ");

    free_list(list);
}

void test_delitem_middle() {
    test_start("delitem - –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞");

    Nameval *list = NULL;
    list = addfront(list, newitem("Third", 3));
    list = addfront(list, newitem("Second", 2));
    list = addfront(list, newitem("First", 1));

    list = delitem(list, "Second");

    int result = (list != NULL &&
                  list->next != NULL &&
                  strcmp(list->next->name, "Third") == 0 &&
                  list_length(list) == 2);

    test_assert(result, "–°–µ—Ä–µ–¥–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ");

    free_list(list);
}

void test_delitem_last() {
    test_start("delitem - –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞");

    Nameval *list = NULL;
    list = addfront(list, newitem("Third", 3));
    list = addfront(list, newitem("Second", 2));
    list = addfront(list, newitem("First", 1));

    list = delitem(list, "Third");

    int result = (list != NULL &&
                  list->next != NULL &&
                  list->next->next == NULL &&
                  list_length(list) == 2);

    test_assert(result, "–û—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ");

    free_list(list);
}

void test_delitem_not_found() {
    test_start("delitem - –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞");

    Nameval *list = NULL;
    list = addfront(list, newitem("Alice", 10));

    int original_length = list_length(list);
    list = delitem(list, "Unknown");

    int result = (list_length(list) == original_length);

    test_assert(result, "–°–ø–∏—Å–æ–∫ –∑–º—ñ–Ω–∏–≤—Å—è –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞");

    free_list(list);
}

void test_list_length() {
    test_start("list_length - –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–≤–∂–∏–Ω–∏");

    Nameval *list = NULL;

    // –ü–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫
    int len0 = list_length(list);

    // –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏
    list = addfront(list, newitem("Three", 3));
    int len1 = list_length(list);

    list = addfront(list, newitem("Two", 2));
    int len2 = list_length(list);

    list = addfront(list, newitem("One", 1));
    int len3 = list_length(list);

    int result = (len0 == 0 && len1 == 1 && len2 == 2 && len3 == 3);

    test_assert(result, "–î–æ–≤–∂–∏–Ω–∞ –æ–±—á–∏—Å–ª–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ");

    free_list(list);
}

void test_reverse_list() {
    test_start("reverse_list - —Ä–æ–∑–≤–æ—Ä–æ—Ç —Å–ø–∏—Å–∫—É");

    Nameval *list = NULL;
    list = addfront(list, newitem("Third", 3));
    list = addfront(list, newitem("Second", 2));
    list = addfront(list, newitem("First", 1));

    // –î–æ —Ä–æ–∑–≤–æ—Ä–æ—Ç—É: First -> Second -> Third
    list = reverse_list(list);
    // –ü—ñ—Å–ª—è —Ä–æ–∑–≤–æ—Ä–æ—Ç—É: Third -> Second -> First

    int result = (list != NULL &&
                  strcmp(list->name, "Third") == 0 &&
                  list->next != NULL &&
                  strcmp(list->next->name, "Second") == 0 &&
                  list->next->next != NULL &&
                  strcmp(list->next->next->name, "First") == 0 &&
                  list->next->next->next == NULL);

    test_assert(result, "–°–ø–∏—Å–æ–∫ —Ä–æ–∑–≤–µ—Ä–Ω—É—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ");

    free_list(list);
}


void test_edge_cases() {
    printf("\n=== –¢–ï–°–¢–ò –ö–†–ê–ô–ù–Ü–• –í–ò–ü–ê–î–ö–Ü–í ===\n");

    // –¢–µ—Å—Ç –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º —Å–ø–∏—Å–∫–æ–º
    test_start("reverse_list - –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫");
    Nameval *empty = reverse_list(NULL);
    test_assert(empty == NULL, "–†–æ–∑–≤–æ—Ä–æ—Ç –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ —Å–ø–∏—Å–∫—É –¥–∞–≤ –Ω–µ NULL");

    // –¢–µ—Å—Ç –∑ –æ–¥–Ω–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º
    test_start("reverse_list - –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç");
    Nameval *single = newitem("Only", 1);
    Nameval *reversed = reverse_list(single);
    int result = (reversed == single && reversed->next == NULL);
    test_assert(result, "–†–æ–∑–≤–æ—Ä–æ—Ç –æ–¥–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ");
    free_list(reversed);

    // –¢–µ—Å—Ç –∑ –¥—É–±–ª—ñ–∫–∞—Ç–∞–º–∏
    test_start("lookup - –¥—É–±–ª—ñ–∫–∞—Ç–∏");
    Nameval *list = NULL;
    list = addfront(list, newitem("Duplicate", 2));
    list = addfront(list, newitem("Duplicate", 1));

    Nameval *found = lookup(list, "Duplicate");
    int dup_result = (found != NULL && found->value == 1); // –ü–æ–≤–∏–Ω–µ–Ω –∑–Ω–∞–π—Ç–∏ –ø–µ—Ä—à–∏–π
    test_assert(dup_result, "–ü—Ä–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∞—Ö –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–µ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç");

    free_list(list);

    // –¢–µ—Å—Ç –∑ –¥–æ–≤–≥–∏–º–∏ —Ä—è–¥–∫–∞–º–∏
    test_start("newitem - –¥–æ–≤–≥–∏–π —Ä—è–¥–æ–∫");
    char long_name[1000];
    for (int i = 0; i < 999; i++) {
        long_name[i] = 'A' + (i % 26);
    }
    long_name[999] = '\0';

    Nameval *long_item = newitem(long_name, 999);
    int long_result = (long_item != NULL &&
                       strlen(long_item->name) == 999 &&
                       strcmp(long_item->name, long_name) == 0);
    test_assert(long_result, "–î–æ–≤–≥–∏–π —Ä—è–¥–æ–∫ –æ–±—Ä–æ–±–ª–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ");

    if (long_item) {
        free(long_item->name);
        free(long_item);
    }
}


void test_performance() {
    printf("\n=== –¢–ï–°–¢–ò –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü ===\n");

    const int LARGE_SIZE = 10000;
    clock_t start, end;

    // –¢–µ—Å—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–µ–ª–∏–∫–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    test_start("–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å - –¥–æ–¥–∞–≤–∞–Ω–Ω—è 10000 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤");

    start = clock();
    Nameval *large_list = NULL;
    for (int i = 0; i < LARGE_SIZE; i++) {
        char name[20];
        sprintf(name, "Item%d", i);
        large_list = addfront(large_list, newitem(name, i));
    }
    end = clock();

    double add_time = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("–Ü–ù–§–û - –ß–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è: %.3f —Å–µ–∫\n", add_time);

    // –¢–µ—Å—Ç –ø–æ—à—É–∫—É –≤ –≤–µ–ª–∏–∫–æ–º—É —Å–ø–∏—Å–∫—É
    start = clock();
    Nameval *found = lookup(large_list, "Item5000");
    end = clock();

    double search_time = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("    –ß–∞—Å –ø–æ—à—É–∫—É –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ: %.6f —Å–µ–∫\n", search_time);
    test_assert(found != NULL && found->value == 5000,
                "–ï–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤–µ–ª–∏–∫–æ–º—É —Å–ø–∏—Å–∫—É");

    // –¢–µ—Å—Ç —Ä–æ–∑–≤–æ—Ä–æ—Ç—É –≤–µ–ª–∏–∫–æ–≥–æ —Å–ø–∏—Å–∫—É
    start = clock();
    large_list = reverse_list(large_list);
    end = clock();

    double reverse_time = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("    –ß–∞—Å —Ä–æ–∑–≤–æ—Ä–æ—Ç—É: %.3f —Å–µ–∫\n", reverse_time);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ä–æ–∑–≤–æ—Ä–æ—Ç—É
    int reverse_correct = (strcmp(large_list->name, "Item0") == 0);
    test_assert(reverse_correct, "–†–æ–∑–≤–æ—Ä–æ—Ç –≤–µ–ª–∏–∫–æ–≥–æ —Å–ø–∏—Å–∫—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π");

    // –û—á–∏—â–µ–Ω–Ω—è
    start = clock();
    free_list(large_list);
    end = clock();

    double free_time = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("    –ß–∞—Å –æ—á–∏—â–µ–Ω–Ω—è: %.3f —Å–µ–∫\n", free_time);
}


void test_memory_integrity() {
    printf("\n=== –¢–ï–°–¢–ò –¶–Ü–õ–Ü–°–ù–û–°–¢–Ü –ü–ê–ú'–Ø–¢–Ü ===\n");

    test_start("–¶—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å –ø–∞–º'—è—Ç—ñ - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è");

    // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ –≤–∏–¥–∞–ª—è—î–º–æ –±–∞–≥–∞—Ç–æ —Å–ø–∏—Å–∫—ñ–≤
    for (int cycle = 0; cycle < 100; cycle++) {
        Nameval *list = NULL;

        // –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏
        for (int i = 0; i < 10; i++) {
            char name[20];
            sprintf(name, "Cycle%d_Item%d", cycle, i);
            list = addfront(list, newitem(name, i));
        }

        // –í–∏–¥–∞–ª—è—î–º–æ —á–∞—Å—Ç–∏–Ω—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        for (int i = 0; i < 5; i++) {
            char name[20];
            sprintf(name, "Cycle%d_Item%d", cycle, i);
            list = delitem(list, name);
        }

        // –û—á–∏—â–∞—î–º–æ —Ä–µ—à—Ç—É
        free_list(list);
    }

    test_assert(1, "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –±–µ–∑ –∫—Ä–∞—Ö—ñ–≤");
}


void test_robustness() {
    printf("\n=== –¢–ï–°–¢–ò –°–¢–Ü–ô–ö–û–°–¢–Ü ===\n");

    // –¢–µ—Å—Ç –∑ NULL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    test_start("–°—Ç—ñ–π–∫—ñ—Å—Ç—å - NULL –ø–∞—Ä–∞–º–µ—Ç—Ä–∏");

    Nameval *result1 = addfront(NULL, NULL);
    Nameval *result2 = lookup(NULL, NULL);
    Nameval *result3 = delitem(NULL, NULL);
    int length = list_length(NULL);

    // –¶—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –Ω–µ –ø–æ–≤–∏–Ω–Ω—ñ –ø—Ä–∏–∑–≤–æ–¥–∏—Ç–∏ –¥–æ –∫—Ä–∞—Ö—É
    test_assert(1, "–û–ø–µ—Ä–∞—Ü—ñ—ó –∑ NULL –≤–∏–∫–æ–Ω–∞–Ω—ñ –±–µ–∑ –∫—Ä–∞—Ö—É");

    // –¢–µ—Å—Ç –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏ —Ä—è–¥–∫–∞–º–∏
    test_start("–°—Ç—ñ–π–∫—ñ—Å—Ç—å - –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏");

    Nameval *empty_name = newitem("", 0);
    int empty_result = (empty_name != NULL &&
                        strlen(empty_name->name) == 0);
    test_assert(empty_result, "–ü–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –æ–±—Ä–æ–±–ª–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ");

    if (empty_name) {
        free(empty_name->name);
        free(empty_name);
    }
}


void run_all_tests() {
    printf("=== –ó–ê–ü–£–°–ö –ü–û–í–ù–û–ì–û –ù–ê–ë–û–†–£ –¢–ï–°–¢–Ü–í ===\n\n");

    // –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    printf("=== –¢–ï–°–¢–ò –û–°–ù–û–í–ù–ò–• –§–£–ù–ö–¶–Ü–ô ===\n");
    test_newitem();
    test_newitem_memory_failure();
    test_addfront();
    test_lookup_found();
    test_lookup_not_found();
    test_lookup_empty_list();
    test_delitem_first();
    test_delitem_middle();
    test_delitem_last();
    test_delitem_not_found();
    test_list_length();
    test_reverse_list();

    // –ö—Ä–∞–π–Ω—ñ –≤–∏–ø–∞–¥–∫–∏
    test_edge_cases();

    // –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
    test_performance();

    // –¶—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å –ø–∞–º'—è—Ç—ñ
    test_memory_integrity();

    // –°—Ç—ñ–π–∫—ñ—Å—Ç—å
    test_robustness();

    // –ü—ñ–¥—Å—É–º–æ–∫
    test_summary();
}

int main(void) {
    printf("=== –ó–∞–≤–¥–∞–Ω–Ω—è 13: –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π —Å–ø–∏—Å–∫—ñ–≤ ===\n\n");

    run_all_tests();


    return (test_suite.failed_tests == 0) ? 0 : 1;
}